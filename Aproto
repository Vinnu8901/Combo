<!-- Left panel for POM Studio -->
<section id="pomLeftCard" class="card">
  <div class="head">Paste HTML</div>
  <div class="body">
    <textarea id="pasteBox" class="ed" placeholder="Paste full page HTML here..."></textarea>
    <div class="row">
      <button id="btnRender" class="btn primary" style="width:auto">Render Preview</button>
      <div class="pill mono">shadow DOM supported at runtime</div>
    </div>
    <div class="head" style="margin:6px -12px 0;border-radius:10px">Preview</div>
    <div class="drop" id="dropZone">Drop .html here</div>
    <iframe id="preview" sandbox="allow-same-origin allow-forms allow-scripts"></iframe>
  </div>
</section>

<!-- Left panel for API Studio -->
<section id="apiLeftCard" class="card hidden">
  <div class="head">Paste cURL</div>
  <div class="body">
    <textarea id="curlBox" class="ed mono" placeholder="Paste cURL here (from Postman/Insomnia)..."></textarea>
    <div class="row" style="align-items:center; gap:12px">
      <label class="small">Framework</label>
      <select id="apiFramework">
        <option value="restassured">RestAssured (Java)</option>
        <option value="karate">Karate DSL</option>
      </select>
      <button id="btnGenAPI" class="btn primary" style="width:auto">Generate API Code</button>
    </div>
  </div>
</section>




function setMode(m){
  modePOM.classList.remove('active'); 
  modeAPI.classList.remove('active');

  if(m==='pom'){ 
    modePOM.classList.add('active'); 

    // Right side
    pomPanel.classList.remove('hidden'); 
    apiPanel.classList.add('hidden'); 

    // Left side
    $('#pomLeftCard').classList.remove('hidden');
    $('#apiLeftCard').classList.add('hidden');
  }
  else { 
    modeAPI.classList.add('active'); 

    // Right side
    pomPanel.classList.add('hidden'); 
    apiPanel.classList.remove('hidden'); 

    // Left side
    $('#pomLeftCard').classList.add('hidden');
    $('#apiLeftCard').classList.remove('hidden');
  }
}



// NEW: Generate API Code directly from pasted cURL
$('#btnGenAPI').addEventListener('click', ()=>{
  const curl = $('#curlBox').value.trim();
  if(!curl){ showToast('No cURL entered'); return; }
  parseCurl(curl);       // auto-fill method/url/headers/body
  generateApiCode();     // output RestAssured / Karate
  showToast('API code generated');
});



function generateApiCode(){
  const method = $('#apiMethod').value;
  const url = $('#apiUrl').value;
  let headers = $('#apiHeaders').value;
  const body = $('#apiBody').value;
  const framework = $('#apiFramework').value; // restassured | karate

  try { headers = JSON.stringify(JSON.parse(headers), null, 2); } catch(e) {}

  let code = "";

  if(framework === "restassured"){
    code = `// RestAssured Example
given()
  .headers(${headers})
  .body(${body})
.when()
  .${method.toLowerCase()}("${url}")
.then()
  .statusCode(200);`;
  }
  else if(framework === "karate"){
    code = `# Karate DSL Example
Feature: API Test
  Scenario: ${method} request
    Given url '${url}'
    And headers ${headers}
    And request ${body}
    When method ${method.toLowerCase()}
    Then status 200`;
  }

  $('#apiCode').value = code;
}




// âœ… API Studio Clear button
// =========================
// API Studio Hooks
// =========================
document.addEventListener("DOMContentLoaded", ()=>{

  // Paste cURL from clipboard
  $('#btnPasteCurl')?.addEventListener('click', async ()=>{
    try{
      const txt = await navigator.clipboard.readText();
      if(!txt) return showToast('Clipboard empty');
      parseCurl(txt); 
      showToast('Parsed cURL');
    }catch(e){ 
      showToast('Clipboard blocked'); 
    }
  });

  // Generate API code (from fields already filled)
  $('#btnGenerateApi')?.addEventListener('click', ()=>{
    generateApiCode(); 
    showToast('API code generated');
  });

  // Copy API code to clipboard
  $('#btnCopyApiCode')?.addEventListener('click', async ()=>{
    await navigator.clipboard.writeText($('#apiCode').value||'');
    showToast('Code copied');
  });

  // âœ… NEW: Generate API Code directly from pasted cURL
  $('#btnGenAPI')?.addEventListener('click', ()=>{
    const curl = $('#curlBox').value.trim();
    if(!curl){ showToast('No cURL entered'); return; }
    parseCurl(curl);        // auto-fill method/url/headers/body
    generateApiCode();      // output RestAssured / Karate
    showToast('API code generated');
  });

  // âœ… Clear API Studio fields
  $('#btnApiClear')?.addEventListener('click', ()=>{
    $('#curlBox').value = '';
    $('#apiMethod').value = 'GET';
    $('#apiUrl').value = '';
    $('#apiHeaders').value = '{}';
    $('#apiBody').value = '{}';
    $('#apiCode').value = '';
    $('#apiResponse').value = '';
    showToast('API Studio cleared');
  });

});


function parseCurl(curl){
  try {
    // ðŸ”¥ Step 1: Normalize
    curl = curl.replace(/\\\s*\n/g, ' ');  // join lines with backslashes
    curl = curl.replace(/\n+/g, ' ');      // remove plain line breaks
    curl = curl.trim();

    // ðŸ”¥ Step 2: Extract method
    let method = (curl.match(/-X\s+(GET|POST|PUT|DELETE|PATCH)/i) || [])[1];
    if(!method){
      // auto-detect: if data present â†’ assume POST, else GET
      if(/--data/.test(curl) || /--data-raw/.test(curl) || /--data-binary/.test(curl)){
        method = 'POST';
      } else {
        method = 'GET';
      }
    }

    // ðŸ”¥ Step 3: Extract URL
    const url = (curl.match(/curl\s+['"]?([^'"\s]+)/i) || [])[1] || '';

    // ðŸ”¥ Step 4: Extract headers
    const headers = {};
    const headerRegex = /-H\s+["']?([^:"']+):\s*([^"']+)["']?/gi;
    let h;
    while((h = headerRegex.exec(curl)) !== null){
      headers[h[1]] = h[2];
    }

    // ðŸ”¥ Step 5: Extract body
    const dataMatch = curl.match(/--data(?:-raw)?\s+['"]([^']+)['"]/i) 
                   || curl.match(/--data-binary\s+['"]([^']+)['"]/i);

    // ðŸ”¥ Step 6: Fill UI fields
    $('#apiMethod').value = method.toUpperCase();
    $('#apiUrl').value = url;
    $('#apiHeaders').value = JSON.stringify(headers, null, 2);
    $('#apiBody').value = dataMatch ? dataMatch[1] : '{}';

  } catch(e){
    console.error("parseCurl failed:", e);
    showToast("Failed to parse cURL");
  }
}





////

function normalizeHeaderKey(key){
  // Auto-capitalize header keys (Authorization, Content-Type, etc.)
  return key.split('-')
    .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())
    .join('-');
}

function parseCurl(curl){
  try {
    // ðŸ”¥ Step 1: Normalize (join multi-line)
    curl = curl.replace(/\\\s*\n/g, ' ');   // join lines with backslashes
    curl = curl.replace(/\n+/g, ' ');       // remove plain line breaks
    curl = curl.trim();

    // ðŸ”¥ Step 2: Detect Method
    let method = (curl.match(/(?:-X|--request)\s+(GET|POST|PUT|DELETE|PATCH)/i) || [])[1];
    if(!method){
      if(/--data/.test(curl) || /--data-raw/.test(curl) || /--data-binary/.test(curl)){
        method = 'POST';
      } else {
        method = 'GET';
      }
    }

    // ðŸ”¥ Step 3: Detect URL
    let url = (curl.match(/--url\s+['"]?([^'"\s]+)/i) || [])[1];
    if(!url){
      url = (curl.match(/curl\s+['"]?([^'"\s]+)/i) || [])[1] || '';
    }

    // ðŸ”¥ Step 4: Extract Headers
    const headers = {};
    const headerRegex = /(?:-H|--header)\s+'([^']+):\s*([^']+)'/gi;
    let h;
    while((h = headerRegex.exec(curl)) !== null){
      const key = normalizeHeaderKey(h[1].trim());
      const value = h[2].trim();
      if(headers[key]){
        headers[key] += "; " + value;   // merge duplicates (like Cookie)
      } else {
        headers[key] = value;
      }
    }

    // ðŸ”¥ Step 5: Pretty-print headers JSON
    let headersJson = '{}';
    try {
      headersJson = JSON.stringify(headers, null, 2);
    } catch(e){
      headersJson = '{}';
    }

    // ðŸ”¥ Step 6: Extract Body (pretty-print JSON if possible)
    let body = '{}';
    const dataMatch = curl.match(/--data(?:-raw)?\s+['"]([^']+)['"]/i) 
                   || curl.match(/--data-binary\s+['"]([^']+)['"]/i);
    if(dataMatch){
      body = dataMatch[1];
      try {
        body = JSON.stringify(JSON.parse(body), null, 2);
      } catch(e){
        // Not valid JSON, keep raw
      }
    }

    // ðŸ”¥ Step 7: Fill UI fields
    $('#apiMethod').value = method.toUpperCase();
    $('#apiUrl').value = url;
    $('#apiHeaders').value = headersJson;
    $('#apiBody').value = body;

  } catch(e){
    console.error("parseCurl failed:", e);
    showToast("Failed to parse cURL");
  }
}




////()////

function normalizeHeaderKey(key){
  return key.split('-')
    .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())
    .join('-');
}

function parseCurl(curl){
  try {
    // ðŸ”¥ Step 1: Normalize (join multi-line)
    curl = curl.replace(/\\\s*\n/g, ' ');   // join lines with backslashes
    curl = curl.replace(/\n+/g, ' ');       // remove plain line breaks
    curl = curl.trim();

    // ðŸ”¥ Step 2: Detect Method
    let method = (curl.match(/(?:-X|--request)\s+(GET|POST|PUT|DELETE|PATCH)/i) || [])[1];
    if(!method){
      if(/--data|--form|-F/.test(curl)){
        method = 'POST';
      } else {
        method = 'GET';
      }
    }

    // ðŸ”¥ Step 3: Detect URL
    let url = (curl.match(/--url\s+['"]?([^'"\s]+)/i) || [])[1];
    if(!url){
      url = (curl.match(/curl\s+['"]?([^'"\s]+)/i) || [])[1] || '';
    }

    // ðŸ”¥ Step 4: Extract Headers
    const headers = {};
    const headerRegex = /(?:-H|--header)\s+'([^']+):\s*([^']+)'/gi;
    let h;
    while((h = headerRegex.exec(curl)) !== null){
      const key = normalizeHeaderKey(h[1].trim());
      const value = h[2].trim();
      if(headers[key]){
        headers[key] += "; " + value;   // merge duplicates (like Cookie)
      } else {
        headers[key] = value;
      }
    }

    // ðŸ”¥ Step 5: Pretty-print headers JSON
    let headersJson = '{}';
    try {
      headersJson = JSON.stringify(headers, null, 2);
    } catch(e){
      headersJson = '{}';
    }

    // ðŸ”¥ Step 6: Detect Body (JSON, urlencoded, form-data)
    let body = '{}';

    // Case A: --data (JSON or raw)
    const dataMatch = curl.match(/--data(?:-raw)?\s+['"]([^']+)['"]/i) 
                   || curl.match(/--data-binary\s+['"]([^']+)['"]/i);
    if(dataMatch){
      body = dataMatch[1];
      try {
        body = JSON.stringify(JSON.parse(body), null, 2);  // pretty JSON
      } catch(e){
        // urlencoded? convert to JSON
        if(body.includes("=") && body.includes("&")){
          const params = {};
          body.split("&").forEach(p=>{
            const [k,v] = p.split("=");
            params[k] = decodeURIComponent(v || "");
          });
          body = JSON.stringify(params, null, 2);
        }
        // else keep as raw string
      }
    }

    // Case B: --form / -F (multipart)
    const formRegex = /(?:--form|-F)\s+'([^=]+)=(@?[^']+)'/gi;
    let f; 
    let multipart = [];
    while((f = formRegex.exec(curl)) !== null){
      const field = f[1].trim();
      const value = f[2].trim();
      if(value.startsWith("@")){
        multipart.push(`And multipart file ${field} = { read: '${value.substring(1)}' }`);
      } else {
        multipart.push(`And multipart field ${field} = '${value}'`);
      }
    }
    if(multipart.length){
      body = multipart.join("\n    "); // Karate-style multipart
    }

    // ðŸ”¥ Step 7: Fill UI fields
    $('#apiMethod').value = method.toUpperCase();
    $('#apiUrl').value = url;
    $('#apiHeaders').value = headersJson;
    $('#apiBody').value = body;

  } catch(e){
    console.error("parseCurl failed:", e);
    showToast("Failed to parse cURL");
  }
}





//ghahhsj//



function generateApiCode(){
  const method = $('#apiMethod').value;
  const url = $('#apiUrl').value;
  let headers = $('#apiHeaders').value;
  let body = $('#apiBody').value;
  const framework = $('#apiFramework').value; // restassured | karate

  // âœ… Pretty-print headers if valid JSON
  try { headers = JSON.stringify(JSON.parse(headers), null, 2); } catch(e) {}

  let code = "";

  // -----------------------------
  // REST ASSURED
  // -----------------------------
  if(framework === "restassured"){
    let rest = `// RestAssured Example
given()
  .headers(${headers})`;

    // Body detection
    try {
      const json = JSON.parse(body);
      rest += `
  .body(${JSON.stringify(json, null, 2)})`;
    } catch(e){
      if(body.includes("multipart field") || body.includes("multipart file")){
        // Multipart handling
        body.split("\n").forEach(line=>{
          if(line.includes("multipart field")){
            const [_, key, value] = line.match(/field (\S+) = '([^']+)'/);
            rest += `
  .multiPart("${key}", "${value}")`;
          }
          if(line.includes("multipart file")){
            const [_, key, file] = line.match(/file (\S+) = { read: '([^']+)'/);
            rest += `
  .multiPart("${key}", new File("${file}"))`;
          }
        });
      } else if(body.includes("=")){
        // URL Encoded
        body.replace(/[\{\}\n"]/g,"").split(",").forEach(pair=>{
          const [k,v] = pair.split(":").map(s=>s.trim());
          if(k && v){
            rest += `
  .formParam("${k}", "${v}")`;
          }
        });
      }
    }

    rest += `
.when()
  .${method.toLowerCase()}("${url}")
.then()
  .statusCode(200);`;

    code = rest;
  }

  // -----------------------------
  // KARATE
  // -----------------------------
  else if(framework === "karate"){
    let karate = `# Karate DSL Example
Feature: API Test
  Scenario: ${method} request
    Given url '${url}'
    And headers ${headers}`;

    try {
      const json = JSON.parse(body);
      karate += `
    And request ${JSON.stringify(json, null, 2)}`;
    } catch(e){
      if(body.includes("multipart field") || body.includes("multipart file")){
        // Karate multipart (already formatted by parseCurl)
        karate += `
    ${body}`;
      } else if(body.includes("=")){
        // Karate form-urlencoded
        karate += `
    And form fields ${body}`;
      }
    }

    karate += `
    When method ${method.toLowerCase()}
    Then status 200`;

    code = karate;
  }

  $('#apiCode').value = code;
}










.




