<!-- Left panel for POM Studio -->
<section id="pomLeftCard" class="card">
  <div class="head">Paste HTML</div>
  <div class="body">
    <textarea id="pasteBox" class="ed" placeholder="Paste full page HTML here..."></textarea>
    <div class="row">
      <button id="btnRender" class="btn primary" style="width:auto">Render Preview</button>
      <div class="pill mono">shadow DOM supported at runtime</div>
    </div>
    <div class="head" style="margin:6px -12px 0;border-radius:10px">Preview</div>
    <div class="drop" id="dropZone">Drop .html here</div>
    <iframe id="preview" sandbox="allow-same-origin allow-forms allow-scripts"></iframe>
  </div>
</section>

<!-- Left panel for API Studio -->
<section id="apiLeftCard" class="card hidden">
  <div class="head">Paste cURL</div>
  <div class="body">
    <textarea id="curlBox" class="ed mono" placeholder="Paste cURL here (from Postman/Insomnia)..."></textarea>
    <div class="row" style="align-items:center; gap:12px">
      <label class="small">Framework</label>
      <select id="apiFramework">
        <option value="restassured">RestAssured (Java)</option>
        <option value="karate">Karate DSL</option>
      </select>
      <button id="btnGenAPI" class="btn primary" style="width:auto">Generate API Code</button>
    </div>
  </div>
</section>




function setMode(m){
  modePOM.classList.remove('active'); 
  modeAPI.classList.remove('active');

  if(m==='pom'){ 
    modePOM.classList.add('active'); 

    // Right side
    pomPanel.classList.remove('hidden'); 
    apiPanel.classList.add('hidden'); 

    // Left side
    $('#pomLeftCard').classList.remove('hidden');
    $('#apiLeftCard').classList.add('hidden');
  }
  else { 
    modeAPI.classList.add('active'); 

    // Right side
    pomPanel.classList.add('hidden'); 
    apiPanel.classList.remove('hidden'); 

    // Left side
    $('#pomLeftCard').classList.add('hidden');
    $('#apiLeftCard').classList.remove('hidden');
  }
}



// NEW: Generate API Code directly from pasted cURL
$('#btnGenAPI').addEventListener('click', ()=>{
  const curl = $('#curlBox').value.trim();
  if(!curl){ showToast('No cURL entered'); return; }
  parseCurl(curl);       // auto-fill method/url/headers/body
  generateApiCode();     // output RestAssured / Karate
  showToast('API code generated');
});



function generateApiCode(){
  const method = $('#apiMethod').value;
  const url = $('#apiUrl').value;
  let headers = $('#apiHeaders').value;
  const body = $('#apiBody').value;
  const framework = $('#apiFramework').value; // restassured | karate

  try { headers = JSON.stringify(JSON.parse(headers), null, 2); } catch(e) {}

  let code = "";

  if(framework === "restassured"){
    code = `// RestAssured Example
given()
  .headers(${headers})
  .body(${body})
.when()
  .${method.toLowerCase()}("${url}")
.then()
  .statusCode(200);`;
  }
  else if(framework === "karate"){
    code = `# Karate DSL Example
Feature: API Test
  Scenario: ${method} request
    Given url '${url}'
    And headers ${headers}
    And request ${body}
    When method ${method.toLowerCase()}
    Then status 200`;
  }

  $('#apiCode').value = code;
}




// âœ… API Studio Clear button
// =========================
// API Studio Hooks
// =========================
document.addEventListener("DOMContentLoaded", ()=>{

  // Paste cURL from clipboard
  $('#btnPasteCurl')?.addEventListener('click', async ()=>{
    try{
      const txt = await navigator.clipboard.readText();
      if(!txt) return showToast('Clipboard empty');
      parseCurl(txt); 
      showToast('Parsed cURL');
    }catch(e){ 
      showToast('Clipboard blocked'); 
    }
  });

  // Generate API code (from fields already filled)
  $('#btnGenerateApi')?.addEventListener('click', ()=>{
    generateApiCode(); 
    showToast('API code generated');
  });

  // Copy API code to clipboard
  $('#btnCopyApiCode')?.addEventListener('click', async ()=>{
    await navigator.clipboard.writeText($('#apiCode').value||'');
    showToast('Code copied');
  });

  // âœ… NEW: Generate API Code directly from pasted cURL
  $('#btnGenAPI')?.addEventListener('click', ()=>{
    const curl = $('#curlBox').value.trim();
    if(!curl){ showToast('No cURL entered'); return; }
    parseCurl(curl);        // auto-fill method/url/headers/body
    generateApiCode();      // output RestAssured / Karate
    showToast('API code generated');
  });

  // âœ… Clear API Studio fields
  $('#btnApiClear')?.addEventListener('click', ()=>{
    $('#curlBox').value = '';
    $('#apiMethod').value = 'GET';
    $('#apiUrl').value = '';
    $('#apiHeaders').value = '{}';
    $('#apiBody').value = '{}';
    $('#apiCode').value = '';
    $('#apiResponse').value = '';
    showToast('API Studio cleared');
  });

});


function parseCurl(curl){
  try {
    // ðŸ”¥ Step 1: Normalize
    curl = curl.replace(/\\\s*\n/g, ' ');  // join lines with backslashes
    curl = curl.replace(/\n+/g, ' ');      // remove plain line breaks
    curl = curl.trim();

    // ðŸ”¥ Step 2: Extract method
    let method = (curl.match(/-X\s+(GET|POST|PUT|DELETE|PATCH)/i) || [])[1];
    if(!method){
      // auto-detect: if data present â†’ assume POST, else GET
      if(/--data/.test(curl) || /--data-raw/.test(curl) || /--data-binary/.test(curl)){
        method = 'POST';
      } else {
        method = 'GET';
      }
    }

    // ðŸ”¥ Step 3: Extract URL
    const url = (curl.match(/curl\s+['"]?([^'"\s]+)/i) || [])[1] || '';

    // ðŸ”¥ Step 4: Extract headers
    const headers = {};
    const headerRegex = /-H\s+["']?([^:"']+):\s*([^"']+)["']?/gi;
    let h;
    while((h = headerRegex.exec(curl)) !== null){
      headers[h[1]] = h[2];
    }

    // ðŸ”¥ Step 5: Extract body
    const dataMatch = curl.match(/--data(?:-raw)?\s+['"]([^']+)['"]/i) 
                   || curl.match(/--data-binary\s+['"]([^']+)['"]/i);

    // ðŸ”¥ Step 6: Fill UI fields
    $('#apiMethod').value = method.toUpperCase();
    $('#apiUrl').value = url;
    $('#apiHeaders').value = JSON.stringify(headers, null, 2);
    $('#apiBody').value = dataMatch ? dataMatch[1] : '{}';

  } catch(e){
    console.error("parseCurl failed:", e);
    showToast("Failed to parse cURL");
  }
}
