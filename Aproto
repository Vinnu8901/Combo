<script>
/* ============================ CORE HELPERS ============================ */

// Robust string literal for XPath (handles both ' and ")
function xpathLiteral(s){
  s = String(s);
  if (s.indexOf('"') === -1) return `"${s}"`;
  if (s.indexOf("'") === -1) return `'${s}'`;
  // split on " and build concat("...", '"', "...")
  const parts = s.split('"');
  const out = [];
  for (let i = 0; i < parts.length; i++){
    if (parts[i] !== '') out.push(`"${parts[i].replace(/\\/g,'\\\\')}"`);
    if (i < parts.length - 1) out.push(`'"'`);
  }
  return `concat(${out.join(',')})`;
}

// Defensive label fetcher (uses user's bestLabelFor if present)
function getLabelFor(el){
  try {
    if (typeof bestLabelFor === 'function') return bestLabelFor(el);
  } catch(e){}
  // lightweight fallback: look for label[for] or nearest label ancestor text
  const id = el && el.getAttribute ? el.getAttribute('id') : null;
  if (id) {
    const sel = `label[for="${id.replace(/([#.;,[\\]()>+~=:*"\\\\])/g,'\\\\$1')}"]`;
    const lab = (window.CURRENT_DOC || document).querySelector(sel);
    if (lab && lab.textContent) return lab.textContent.trim();
  }
  const parentLabel = el && el.closest ? el.closest('label') : null;
  if (parentLabel && parentLabel.textContent) return parentLabel.textContent.trim();
  return null;
}

/* ============================ SKIP / DEDUPE ============================ */

function isHiddenByInlineStyle(el){
  const s = (el.getAttribute('style')||'').toLowerCase();
  return /display\s*:\s*none|visibility\s*:\s*hidden|opacity\s*:\s*0|pointer-events\s*:\s*none/.test(s);
}
function hasUsefulLabel(el){
  const id = el.id;
  if (el.getAttribute('aria-label')) return true;
  if (el.getAttribute('placeholder')) return true;
  if (el.getAttribute('name')) return true;
  if (id){
    const sel = `label[for="${id.replace(/([#.;,[\\]()>+~=:*"\\\\])/g,'\\\\$1')}"]`;
    if((window.CURRENT_DOC||document).querySelector(sel)) return true;
  }
  const t = (el.textContent||'').trim();
  return t.length > 0;
}
function isSFNoise(el){
  const cls = el.className || '';
  if(/\bslds-assistive-text\b/.test(cls)) return true;
  if(/\bslds-hide\b/.test(cls)) return true;
  if(el.getAttribute('role') === 'presentation') return true;
  return false;
}
function isPegaNoise(el){
  const ctl = el.getAttribute('data-ctl') || '';
  if(ctl === 'Tooltip') return true;
  // decorative icons without semantics/handlers
  if(ctl === 'Icon' && !el.hasAttribute('role') && !el.onclick) return true;
  return false;
}
function shouldSkip(el){
  if(!el || el.nodeType !== 1) return true;
  const tag = el.tagName.toLowerCase();

  // hidden/disabled/read-only
  if(el.hasAttribute('hidden')) return true;
  if(el.getAttribute('aria-hidden') === 'true') return true;
  if(isHiddenByInlineStyle(el)) return true;
  if(el.hasAttribute('disabled') || el.getAttribute('aria-disabled') === 'true') return true;
  if(el.hasAttribute('readonly')) return true;
  if(tag === 'input' && (el.getAttribute('type')||'').toLowerCase() === 'hidden') return true;

  // non-interactive anchors
  if(tag === 'a' && (!el.hasAttribute('href') || el.getAttribute('href') === '#')) return true;

  // framework presentational noise
  if(isSFNoise(el)) return true;
  if(isPegaNoise(el)) return true;

  // no label/attr/text signal
  if(!hasUsefulLabel(el)) return true;

  return false;
}

// Smart anchor text used in dedupe signature (defensive)
function getSmartAnchorTextSafe(el){
  try {
    if (typeof getSmartAnchorText === 'function') return getSmartAnchorText(el) || '';
  } catch(e){}
  const l = getLabelFor(el);
  return l || (el.getAttribute('aria-label') || '').trim();
}

function collectCandidateElements(doc){
  const basics = Array.from(doc.querySelectorAll([
    // core interactables
    'input:not([type="hidden"])','button','a','select','textarea',
    // ARIA/button-like
    '[role="button"]','span[role="button"]',
    // Framework hooks (SF / Pega / misc)
    '[data-ctl]','[data-qa-locator]','[data-aura-class]','[data-aura-rendered-by]','[data-key]','[data-id]',
    // LWC/force custom tags
    'lightning-input','lightning-button','lightning-combobox','lightning-textarea',
    'lightning-record-edit-form','lightning-tab','lightning-input-field','lightning-formatted-text',
    'force-record-view','force-input','force-button','force-lookup','force-list-view'
  ].join(',')));

  // early skip
  let filtered = basics.filter(el => !shouldSkip(el));

  // de-duplicate by signature (tag + key attrs + smart anchor)
  const seen = new Set();
  filtered = filtered.filter(el=>{
    const anchor = getSmartAnchorTextSafe(el);
    const sig = [
      el.tagName.toLowerCase(),
      el.id||'',
      el.getAttribute('name')||'',
      el.getAttribute('data-qa-locator')||'',
      el.getAttribute('data-ctl')||'',
      el.getAttribute('data-key')||'',
      el.getAttribute('data-id')||'',
      anchor
    ].join('|');
    if(seen.has(sig)) return false;
    seen.add(sig);
    return true;
  });

  return filtered;
}

/* ============================ GENERATORS ============================ */

// --- Basic XPath ---
function genBasicXPath(el){
  const tag = el.tagName.toLowerCase();

  if(el.id) return `//*[@id=${xpathLiteral(el.id)}]`;
  const name = el.getAttribute('name');
  if(name) return `//${tag}[@name=${xpathLiteral(name)}]`;

  const label = getLabelFor(el);
  if(label) return `//${tag}[contains(normalize-space(.), ${xpathLiteral(label.trim())})]`;

  const cls = (el.getAttribute('class')||'').trim().split(/\s+/).filter(Boolean)[0];
  if(cls) return `//${tag}[contains(concat(' ', normalize-space(@class), ' '), ${xpathLiteral(' ' + cls + ' ')})]`;

  const parent = el.parentElement;
  if(!parent) return `//${tag}[1]`;
  const same = Array.from(parent.children).filter(x => x.tagName === el.tagName);
  const idx = same.indexOf(el) + 1;
  return `${genBasicXPath(parent)}/${tag}[${idx}]`;
}

// --- Wildcards ---
function genWildcardXPath(el){
  const tag = '*';
  if(el.id) return `//*[@id=${xpathLiteral(el.id)}]`;
  const name = el.getAttribute('name');
  if(name) return `//*[@name=${xpathLiteral(name)}]`;

  const label = getLabelFor(el);
  if(label) return `//${tag}[contains(normalize-space(.), ${xpathLiteral(label.trim())})]`;

  const cls = (el.getAttribute('class')||'').trim().split(/\s+/).filter(Boolean)[0];
  if(cls) return `//${tag}[contains(concat(' ', normalize-space(@class), ' '), ${xpathLiteral(' ' + cls + ' ')})]`;

  return genBasicXPath(el);
}

// --- Axes (label[for], aria-labelledby, headings/legend) ---
function genAxesXPath(el){
  const tag = el.tagName.toLowerCase();
  const id = el.getAttribute('id');

  // explicit label[for]
  if (id) return `//label[@for=${xpathLiteral(id)}]/following::${tag}[1]`;

  // aria-labelledby
  const al = el.getAttribute('aria-labelledby');
  if (al) return `//*[@id=${xpathLiteral(al.split(/\s+/)[0])}]/following::${tag}[1]`;

  // text label fallback
  const label = getLabelFor(el);
  if (label) return `//label[contains(normalize-space(.), ${xpathLiteral(label.trim())})]/following::${tag}[1]`;

  // heading/legend anchor OR basic
  return `((//legend|//h1|//h2|//h3|//h4|//h5|//h6)[contains(normalize-space(.), ${xpathLiteral((label||'').trim())})]/following::${tag}[1]) | (${genBasicXPath(el)})`;
}

// --- Function-based (placeholder/title/alt) ---
function genFunctionXPath(el){
  const tag = el.tagName.toLowerCase();
  if(el.placeholder && el.placeholder.trim()) return `//${tag}[contains(@placeholder, ${xpathLiteral(el.placeholder)})]`;
  if(el.title && el.title.trim()) return `//${tag}[contains(@title, ${xpathLiteral(el.title)})]`;
  if(el.alt && el.alt.trim()) return `//${tag}[contains(@alt, ${xpathLiteral(el.alt)})]`;
  return genBasicXPath(el);
}

/* -------- Salesforce (generic + LWC + Aura) -------- */

function genSalesforceXPath(el){
  const tag = el.tagName.toLowerCase();
  if (el.getAttribute('data-qa-locator'))
    return `//${tag}[@data-qa-locator=${xpathLiteral(el.getAttribute('data-qa-locator'))}]`;
  if (el.getAttribute('data-key'))
    return `//${tag}[@data-key=${xpathLiteral(el.getAttribute('data-key'))}]`;
  if (el.getAttribute('title'))
    return `//${tag}[@title=${xpathLiteral(el.getAttribute('title'))}]`;
  if (el.getAttribute('data-aura-rendered-by'))
    return `//${tag}[@data-aura-rendered-by=${xpathLiteral(el.getAttribute('data-aura-rendered-by'))}]`;
  return genBasicXPath(el);
}

function genSalesforceLWCXPath(el){
  const tag = el.tagName.toLowerCase();
  if (el.getAttribute('data-id'))
    return `//${tag}[@data-id=${xpathLiteral(el.getAttribute('data-id'))}]`;
  if (el.getAttribute('data-field'))
    return `//${tag}[@data-field=${xpathLiteral(el.getAttribute('data-field'))}]`;

  // on lightning-* wrapper, prefer inner native control if present
  if (/^lightning-/.test(tag)){
    return `(//${tag}[@data-id or @data-field or @data-key or @title or @data-qa-locator])[1]` +
           `| ancestor-or-self::${tag}//input | ancestor-or-self::${tag}//button`;
  }
  return genSalesforceXPath(el);
}

function genSalesforceAuraXPath(el){
  const tag = el.tagName.toLowerCase();
  if (el.getAttribute('data-aura-class'))
    return `//${tag}[@data-aura-class=${xpathLiteral(el.getAttribute('data-aura-class'))}]`;
  if (el.getAttribute('data-aura-rendered-by'))
    return `//${tag}[@data-aura-rendered-by=${xpathLiteral(el.getAttribute('data-aura-rendered-by'))}]`;
  return genSalesforceXPath(el);
}

/* -------- Pega -------- */

function genPegaXPath(el){
  const tag = el.tagName.toLowerCase();
  if (el.getAttribute('data-test-id'))
    return `//${tag}[@data-test-id=${xpathLiteral(el.getAttribute('data-test-id'))}]`;
  if (el.getAttribute('data-node-id'))
    return `//${tag}[@data-node-id=${xpathLiteral(el.getAttribute('data-node-id'))}]`;
  if (el.getAttribute('data-ctl'))
    return `//${tag}[@data-ctl=${xpathLiteral(el.getAttribute('data-ctl'))}]`;
  if (el.getAttribute('role') === 'button')
    return `//${tag}[@role='button']`;
  return genBasicXPath(el);
}

/* ============================ CHOOSER ============================ */

function firstNonEmpty(){ // utility
  for (let i=0; i<arguments.length; i++){
    const v = arguments[i];
    if (typeof v === 'string' && v.trim()) return v;
  }
  return null;
}

// Best order tuned for reliability
function bestXPath(el){
  const lwc = genSalesforceLWCXPath(el);
  const aura = genSalesforceAuraXPath(el);
  const sfg = genSalesforceXPath(el);
  const pega = genPegaXPath(el);
  const axes = genAxesXPath(el);
  const fnc  = genFunctionXPath(el);
  const wild = genWildcardXPath(el);
  const basic= genBasicXPath(el);
  return firstNonEmpty(lwc, aura, sfg, pega, axes, fnc, wild, basic);
}

/* ============================ MAIN: EXTRACT ============================ */

function extractAllLocators(){
  const DOC = (typeof CURRENT_DOC !== 'undefined' && CURRENT_DOC) ? CURRENT_DOC : document;

  // 1) collect candidates
  let elements = collectCandidateElements(DOC);

  // 2) safety skip (double-check)
  elements = elements.filter(el => !shouldSkip(el));

  const results = [];

  // 3) build entries
  for(const el of elements){
    const attrs = {
      id: el.id || null,
      name: el.getAttribute('name') || null,
      'data-qa-locator': el.getAttribute('data-qa-locator') || null,
      'data-ctl': el.getAttribute('data-ctl') || null,
      'data-aura-class': el.getAttribute('data-aura-class') || null,
      'data-aura-rendered-by': el.getAttribute('data-aura-rendered-by') || null,
      'data-key': el.getAttribute('data-key') || null,
      'data-id': el.getAttribute('data-id') || null,
      role: el.getAttribute('role') || null,
      placeholder: el.getAttribute('placeholder') || null,
      type: el.getAttribute('type') || null
    };

    const xpaths = {
      basic:       genBasicXPath(el),
      wildcards:   genWildcardXPath(el),
      axes:        genAxesXPath(el),
      functions:   genFunctionXPath(el),
      sf:          genSalesforceXPath(el),
      sflwc:       genSalesforceLWCXPath(el),
      sfaura:      genSalesforceAuraXPath(el),
      pega:        genPegaXPath(el)
    };

    const css = (typeof generateCssSelector === 'function') ? generateCssSelector(el) : null;
    const playwright = (typeof generatePlaywrightSelectors === 'function') ? generatePlaywrightSelectors(el) : null;
    const anchors = getSmartAnchorTextSafe(el);
    const best = bestXPath(el);

    results.push({
      element: el,
      tag: el.tagName.toLowerCase(),
      attrs,
      anchors,
      xpaths,
      css,
      playwright,
      best
    });
  }

  // 4) post-filter + de-dup
  const seen = new Set();
  const deduped = [];
  for(const r of results){
    if(!r.element || shouldSkip(r.element)) continue;
    const sig = [
      r.tag,
      r.attrs.id || '',
      r.attrs.name || '',
      r.attrs['data-qa-locator'] || '',
      r.attrs['data-ctl'] || '',
      r.attrs['data-key'] || '',
      r.attrs['data-id'] || '',
      r.anchors || '',
      r.best || ''
    ].join('|');
    if(seen.has(sig)) continue;
    seen.add(sig);
    deduped.push(r);
  }

  // 5) render or return
  if(typeof renderLocatorList === 'function'){
    renderLocatorList(deduped);
  }else{
    console.table(deduped.map(d => ({
      tag: d.tag, id: d.attrs.id, name: d.attrs.name, best: d.best
    })));
  }
  return deduped;
}
</script>



<script>
/* ============================ CORE HELPERS ============================ */

// Robust string literal for XPath (handles both ' and ")
function xpathLiteral(s){
  s = String(s);
  if (s.indexOf('"') === -1) return `"${s}"`;
  if (s.indexOf("'") === -1) return `'${s}'`;
  const parts = s.split('"');
  const out = [];
  for (let i = 0; i < parts.length; i++){
    if (parts[i] !== '') out.push(`"${parts[i].replace(/\\/g,'\\\\')}"`);
    if (i < parts.length - 1) out.push(`'"'`);
  }
  return `concat(${out.join(',')})`;
}

// Defensive label fetcher (uses user's bestLabelFor if present)
function getLabelFor(el){
  try { if (typeof bestLabelFor === 'function') return bestLabelFor(el); } catch(e){}
  const id = el && el.getAttribute ? el.getAttribute('id') : null;
  if (id) {
    const sel = `label[for="${id.replace(/([#.;,[\\]()>+~=:*"\\\\])/g,'\\\\$1')}"]`;
    const lab = (window.CURRENT_DOC || document).querySelector(sel);
    if (lab && lab.textContent) return lab.textContent.trim();
  }
  const parentLabel = el && el.closest ? el.closest('label') : null;
  if (parentLabel && parentLabel.textContent) return parentLabel.textContent.trim();
  return null;
}

/* ============================ SKIP / DEDUPE ============================ */

function isHiddenByInlineStyle(el){
  const s = (el.getAttribute('style')||'').toLowerCase();
  return /display\s*:\s*none|visibility\s*:\s*hidden|opacity\s*:\s*0|pointer-events\s*:\s*none/.test(s);
}
function hasUsefulLabel(el){
  const id = el.id;
  if (el.getAttribute('aria-label')) return true;
  if (el.getAttribute('placeholder')) return true;
  if (el.getAttribute('name')) return true;
  if (id){
    const sel = `label[for="${id.replace(/([#.;,[\\]()>+~=:*"\\\\])/g,'\\\\$1')}"]`;
    if((window.CURRENT_DOC||document).querySelector(sel)) return true;
  }
  const t = (el.textContent||'').trim();
  return t.length > 0;
}
function isSFNoise(el){
  const cls = el.className || '';
  if(/\bslds-assistive-text\b/.test(cls)) return true;
  if(/\bslds-hide\b/.test(cls)) return true;
  if(el.getAttribute('role') === 'presentation') return true;
  return false;
}
function isPegaNoise(el){
  const ctl = el.getAttribute('data-ctl') || '';
  if(ctl === 'Tooltip') return true;
  if(ctl === 'Icon' && !el.hasAttribute('role') && !el.onclick) return true;
  return false;
}
function shouldSkip(el){
  if(!el || el.nodeType !== 1) return true;
  const tag = el.tagName.toLowerCase();

  // hidden/disabled/read-only
  if(el.hasAttribute('hidden')) return true;
  if(el.getAttribute('aria-hidden') === 'true') return true;
  if(isHiddenByInlineStyle(el)) return true;
  if(el.hasAttribute('disabled') || el.getAttribute('aria-disabled') === 'true') return true;
  if(el.hasAttribute('readonly')) return true;
  if(tag === 'input' && (el.getAttribute('type')||'').toLowerCase() === 'hidden') return true;

  // non-interactive anchors
  if(tag === 'a' && (!el.hasAttribute('href') || el.getAttribute('href') === '#')) return true;

  // framework presentational noise
  if(isSFNoise(el)) return true;
  if(isPegaNoise(el)) return true;

  // no label/attr/text signal
  if(!hasUsefulLabel(el)) return true;

  return false;
}

// Smart anchor text used in dedupe signature (defensive)
function getSmartAnchorTextSafe(el){
  try { if (typeof getSmartAnchorText === 'function') return getSmartAnchorText(el) || ''; } catch(e){}
  const l = getLabelFor(el);
  return l || (el.getAttribute('aria-label') || '').trim();
}

function collectCandidateElements(doc){
  const basics = Array.from(doc.querySelectorAll([
    // core interactables
    'input:not([type="hidden"])','button','a','select','textarea',
    // ARIA/button-like
    '[role="button"]','span[role="button"]',
    // Framework hooks (SF / Pega / misc)
    '[data-ctl]','[data-qa-locator]','[data-aura-class]','[data-aura-rendered-by]','[data-key]','[data-id]',
    // LWC/force custom tags
    'lightning-input','lightning-button','lightning-combobox','lightning-textarea',
    'lightning-record-edit-form','lightning-tab','lightning-input-field','lightning-formatted-text',
    'force-record-view','force-input','force-button','force-lookup','force-list-view'
  ].join(',')));

  // early skip
  let filtered = basics.filter(el => !shouldSkip(el));

  // de-duplicate by signature (tag + key attrs + smart anchor)
  const seen = new Set();
  filtered = filtered.filter(el=>{
    const anchor = getSmartAnchorTextSafe(el);
    const sig = [
      el.tagName.toLowerCase(),
      el.id||'',
      el.getAttribute('name')||'',
      el.getAttribute('data-qa-locator')||'',
      el.getAttribute('data-ctl')||'',
      el.getAttribute('data-key')||'',
      el.getAttribute('data-id')||'',
      anchor
    ].join('|');
    if(seen.has(sig)) return false;
    seen.add(sig);
    return true;
  });

  return filtered;
}

/* ============================ GENERATORS ============================ */

// --- Basic XPath ---
function genBasicXPath(el){
  const tag = el.tagName.toLowerCase();

  if(el.id) return `//*[@id=${xpathLiteral(el.id)}]`;
  const name = el.getAttribute('name');
  if(name) return `//${tag}[@name=${xpathLiteral(name)}]`;

  const label = getLabelFor(el);
  if(label) return `//${tag}[contains(normalize-space(.), ${xpathLiteral(label.trim())})]`;

  const cls = (el.getAttribute('class')||'').trim().split(/\s+/).filter(Boolean)[0];
  if(cls) return `//${tag}[contains(concat(' ', normalize-space(@class), ' '), ${xpathLiteral(' ' + cls + ' ')})]`;

  const parent = el.parentElement;
  if(!parent) return `//${tag}[1]`;
  const same = Array.from(parent.children).filter(x => x.tagName === el.tagName);
  const idx = same.indexOf(el) + 1;
  return `${genBasicXPath(parent)}/${tag}[${idx}]`;
}

// --- Wildcards ---
function genWildcardXPath(el){
  const tag = '*';
  if(el.id) return `//*[@id=${xpathLiteral(el.id)}]`;
  const name = el.getAttribute('name');
  if(name) return `//*[@name=${xpathLiteral(name)}]`;

  const label = getLabelFor(el);
  if(label) return `//${tag}[contains(normalize-space(.), ${xpathLiteral(label.trim())})]`;

  const cls = (el.getAttribute('class')||'').trim().split(/\s+/).filter(Boolean)[0];
  if(cls) return `//${tag}[contains(concat(' ', normalize-space(@class), ' '), ${xpathLiteral(' ' + cls + ' ')})]`;

  return genBasicXPath(el);
}

// --- Axes (label[for], aria-labelledby, headings/legend) ---
function genAxesXPath(el){
  const tag = el.tagName.toLowerCase();
  const id = el.getAttribute('id');

  // explicit label[for]
  if (id) return `//label[@for=${xpathLiteral(id)}]/following::${tag}[1]`;

  // aria-labelledby
  const al = el.getAttribute('aria-labelledby');
  if (al) return `//*[@id=${xpathLiteral(al.split(/\s+/)[0])}]/following::${tag}[1]`;

  // text label fallback
  const label = getLabelFor(el);
  if (label) return `//label[contains(normalize-space(.), ${xpathLiteral(label.trim())})]/following::${tag}[1]`;

  // heading/legend anchor OR basic
  return `((//legend|//h1|//h2|//h3|//h4|//h5|//h6)[contains(normalize-space(.), ${xpathLiteral((label||'').trim())})]/following::${tag}[1]) | (${genBasicXPath(el)})`;
}

// --- Function-based (placeholder/title/alt) ---
function genFunctionXPath(el){
  const tag = el.tagName.toLowerCase();
  if(el.placeholder && el.placeholder.trim()) return `//${tag}[contains(@placeholder, ${xpathLiteral(el.placeholder)})]`;
  if(el.title && el.title.trim()) return `//${tag}[contains(@title, ${xpathLiteral(el.title)})]`;
  if(el.alt && el.alt.trim()) return `//${tag}[contains(@alt, ${xpathLiteral(el.alt)})]`;
  return genBasicXPath(el);
}

/* -------- Salesforce (generic + LWC + Aura) -------- */

function genSalesforceXPath(el){
  const tag = el.tagName.toLowerCase();
  if (el.getAttribute('data-qa-locator'))
    return `//${tag}[@data-qa-locator=${xpathLiteral(el.getAttribute('data-qa-locator'))}]`;
  if (el.getAttribute('data-key'))
    return `//${tag}[@data-key=${xpathLiteral(el.getAttribute('data-key'))}]`;
  if (el.getAttribute('title'))
    return `//${tag}[@title=${xpathLiteral(el.getAttribute('title'))}]`;
  if (el.getAttribute('data-aura-rendered-by'))
    return `//${tag}[@data-aura-rendered-by=${xpathLiteral(el.getAttribute('data-aura-rendered-by'))}]`;
  return genBasicXPath(el);
}

function genSalesforceLWCXPath(el){
  const tag = el.tagName.toLowerCase();
  if (el.getAttribute('data-id'))
    return `//${tag}[@data-id=${xpathLiteral(el.getAttribute('data-id'))}]`;
  if (el.getAttribute('data-field'))
    return `//${tag}[@data-field=${xpathLiteral(el.getAttribute('data-field'))}]`;

  // on lightning-* wrapper, prefer inner native control if present
  if (/^lightning-/.test(tag)){
    return `(//${tag}[@data-id or @data-field or @data-key or @title or @data-qa-locator])[1]` +
           `| ancestor-or-self::${tag}//input | ancestor-or-self::${tag}//button`;
  }
  return genSalesforceXPath(el);
}

function genSalesforceAuraXPath(el){
  const tag = el.tagName.toLowerCase();
  if (el.getAttribute('data-aura-class'))
    return `//${tag}[@data-aura-class=${xpathLiteral(el.getAttribute('data-aura-class'))}]`;
  if (el.getAttribute('data-aura-rendered-by'))
    return `//${tag}[@data-aura-rendered-by=${xpathLiteral(el.getAttribute('data-aura-rendered-by'))}]`;
  return genSalesforceXPath(el);
}

/* -------- Pega -------- */

function genPegaXPath(el){
  const tag = el.tagName.toLowerCase();
  if (el.getAttribute('data-test-id'))
    return `//${tag}[@data-test-id=${xpathLiteral(el.getAttribute('data-test-id'))}]`;
  if (el.getAttribute('data-node-id'))
    return `//${tag}[@data-node-id=${xpathLiteral(el.getAttribute('data-node-id'))}]`;
  if (el.getAttribute('data-ctl'))
    return `//${tag}[@data-ctl=${xpathLiteral(el.getAttribute('data-ctl'))}]`;
  if (el.getAttribute('role') === 'button')
    return `//${tag}[@role='button']`;
  return genBasicXPath(el);
}

/* ============================ CHOOSER ============================ */

function firstNonEmpty(){
  for (let i=0; i<arguments.length; i++){
    const v = arguments[i];
    if (typeof v === 'string' && v.trim()) return v;
  }
  return null;
}

// Best order tuned for reliability
function bestXPath(el){
  const lwc = genSalesforceLWCXPath(el);
  const aura = genSalesforceAuraXPath(el);
  const sfg = genSalesforceXPath(el);
  const pega = genPegaXPath(el);
  const axes = genAxesXPath(el);
  const fnc  = genFunctionXPath(el);
  const wild = genWildcardXPath(el);
  const basic= genBasicXPath(el);
  return firstNonEmpty(lwc, aura, sfg, pega, axes, fnc, wild, basic);
}

/* ============================ MAIN: EXTRACT + UI BRIDGE ============================ */

// Fallbacks so this script doesn't error if your file hasn't defined these utilities.
if (typeof window.generateCssSelector !== 'function') {
  window.generateCssSelector = function(){ return ''; };
}
if (typeof window.generatePlaywrightSelectors !== 'function') {
  window.generatePlaywrightSelectors = function(){ return ''; };
}
if (typeof window.showToast !== 'function') {
  window.showToast = function(){};
}

// Helper: find active panel/tab (works if your UI uses .chip[data-paneltab].active)
function getActivePanelTab(){
  const activeChip = document.querySelector('.chip.active');
  return (activeChip && activeChip.dataset.paneltab) ? activeChip.dataset.paneltab : 'basic';
}

// Override / Provide extractAllLocators to feed CURRENT_LOCATORS and render via fillLocatorList(panel)
window.extractAllLocators = function(){
  const DOC = (typeof CURRENT_DOC !== 'undefined' && CURRENT_DOC) ? CURRENT_DOC : document;

  let elements = collectCandidateElements(DOC).filter(el => !shouldSkip(el));

  // BUILD in your UI's expected shape
  const built = elements.map((el, idx)=>{
    const tag = el.tagName.toLowerCase();
    const label = getSmartAnchorTextSafe(el);
    const cls = (el.getAttribute('class')||'');
    const hasSF = /\bslds-/.test(cls) || el.hasAttribute('data-aura-class') || el.hasAttribute('data-aura-rendered-by') || /^lightning-/.test(tag);
    const hasPega = el.hasAttribute('data-ctl') || el.hasAttribute('data-test-id') || el.hasAttribute('data-node-id');
    const framework = hasPega ? 'Pega+' : (hasSF ? 'Salesforce+' : '');

    const xp_basic      = genBasicXPath(el) || '';
    const xp_wildcards  = genWildcardXPath(el) || '';
    const xp_axes       = genAxesXPath(el) || '';
    const xp_funcs      = genFunctionXPath(el) || '';
    const xp_sf         = genSalesforceXPath(el) || '';
    const xp_sfaura     = genSalesforceAuraXPath(el) || '';
    const xp_sflwc      = genSalesforceLWCXPath(el) || '';

    const xp_sfsmart    = (typeof genSalesforceSmartXPath === 'function') ? (genSalesforceSmartXPath(el) || '') : '';
    const xp_pega       = genPegaXPath(el) || '';
    const xp_pegasmart  = (typeof genPegaSmartXPath === 'function') ? (genPegaSmartXPath(el) || '') : '';

    const cssSel        = (typeof generateCssSelector === 'function') ? (generateCssSelector(el) || '') : '';
    const pwSel         = (typeof generatePlaywrightSelectors === 'function') ? (generatePlaywrightSelectors(el) || '') : '';

    return {
      id: `E${idx+1}`,
      tag,
      text: label,
      framework,
      xpaths: {
        basic:     xp_basic,
        wildcards: xp_wildcards,
        axes:      xp_axes,
        functions: xp_funcs,
        sf:        xp_sf || xp_sflwc || xp_sfaura,
        sfsmart:   xp_sfsmart,
        pega:      xp_pega,
        pegasmart: xp_pegasmart
      },
      css: cssSel,
      playwright: pwSel
    };
  });

  // De-dup using signature (tag + text + key xpaths/css)
  const seen = new Set();
  const deduped = [];
  for(const l of built){
    const sig = [
      l.tag,
      (l.text||''),
      l.xpaths.sf || '',
      l.xpaths.pega || '',
      l.xpaths.basic || '',
      l.css || ''
    ].join('|');
    if(seen.has(sig)) continue;
    seen.add(sig);
    deduped.push(l);
  }

  // Expose to UI + render
  window.CURRENT_LOCATORS = deduped;
  const panel = getActivePanelTab();
  if (typeof fillLocatorList === 'function') {
    fillLocatorList(panel);
  }
  if (typeof showToast === 'function') {
    showToast(`Extracted ${deduped.length} elements`);
  }

  return deduped;
};
</script>



