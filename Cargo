$('#btnGenPOM').addEventListener('click', ()=>{
  const panel = $('.chip.active')?.dataset.paneltab || 'basic';
  const className = $('#pageClassName')?.value?.trim() || "SamplePage";

  let locsWithPanel;

  if(panel === 'dynamic'){
    locsWithPanel = [
      { text: 'inputs',    chosenXpath: "//input[not(@type='checkbox') and (@name='%s' or @placeholder='%s')]" },
      { text: 'checkboxes',chosenXpath: "//input[@type='checkbox']" },
      { text: 'dropdowns', chosenXpath: "//select | //div[contains(@class,'dropdown')]" },
      { text: 'buttons',   chosenXpath: "//button[contains(normalize-space(.),'%s')] | //a[contains(@class,'btn')]" }
    ];
  } else {
    if(!CURRENT_LOCATORS.length){
      showToast('Render & extract first');
      return;
    }

    const checkedIds = $$('.loc-check:checked').map(cb => cb.dataset.id);
    const selectedLocs = CURRENT_LOCATORS.filter(l => checkedIds.includes(l.id));
    if(!selectedLocs.length){
      showToast('Select at least one element');
      return;
    }

    locsWithPanel = selectedLocs.map(loc=>{
      let value = loc.xpaths.basic;
      if(panel === 'wildcards') value = loc.xpaths.wildcards;
      if(panel === 'axes')      value = loc.xpaths.axes;
      if(panel === 'functions') value = loc.xpaths.functions;
      if(panel === 'sf')        value = loc.xpaths.sfsmart || loc.xpaths.sf;
      if(panel === 'pega')      value = loc.xpaths.pegasmart || loc.xpaths.pega;
      return {...loc, chosenXpath: value};
    });
  }

  const fw = $('.sw[data-fw].active')?.dataset.fw;         
  const runner = $('.sw[data-runner].active')?.dataset.runner; 
  const lang = $('.sw[data-lang].active')?.dataset.lang;   

  try {
    const res = buildArtifacts({fw, runner, lang, locs: locsWithPanel, className});
    POM_CACHE = { pom: res.pom, steps: res.steps };
    output.value = `// ===== POM =====\n${res.pom}\n\n// ===== Steps =====\n${res.steps}`;
    showToast('POM + Steps generated');
  } catch(e){
    console.error("POM generation failed:", e);
    showToast("POM generation failed, see console");
  }
});


function buildArtifacts({fw, runner, lang, locs, className}){
  if(lang==='java'){
    if(fw==='selenium') return javaSeleniumArtifacts(runner, locs, className);
    return javaPlaywrightArtifacts(runner, locs, className);
  }
  if(lang==='javascript') return jsPlaywrightArtifacts(locs, className);
  if(lang==='typescript') return tsPlaywrightArtifacts(locs, className);
  if(lang==='python') return pyPlaywrightArtifacts(locs, className);
  return {pom:'// Unsupported combination', steps:''};
}







function javaSeleniumArtifacts(runner, locs, className="SamplePage"){
  const fields = locs.map((l,i)=>`  @FindBy(xpath = "${l.chosenXpath || l.xpaths.basic}")\n  private WebElement ${camel(l.text)||'elem'+(i+1)};`).join('\n\n');

  const pom = `import org.openqa.selenium.*; 
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class ${className} {
  private WebDriver driver;
${fields}

  public ${className}(WebDriver driver){
    this.driver = driver;
    PageFactory.initElements(driver, this);
  }
}`;

  const steps = runner==='cucumber' ? 
`import io.cucumber.java.en.*;

public class ${className}Steps {
  private ${className} page;
}` :
`import org.testng.annotations.*;

public class ${className}Test {
  private ${className} page;
}`;
  return {pom, steps};
}



function javaPlaywrightArtifacts(runner, locs, className="SamplePage"){
  const fields = locs.map((l,i)=>`  private Locator ${camel(l.text)||'elem'+(i+1)};`).join('\n');
  const initLines = locs.map((l,i)=>`    ${camel(l.text)||'elem'+(i+1)} = page.locator("${l.chosenXpath || l.css}");`).join('\n');

  const pom = `import com.microsoft.playwright.*;

public class ${className} {
  private final Page page;
${fields}

  public ${className}(Page page){
    this.page = page;
${initLines}
  }
}`;

  const steps = runner==='cucumber' ? 
`import io.cucumber.java.en.*;

public class ${className}Steps {
  private ${className} page;
}` :
`import org.testng.annotations.*;

public class ${className}Test {
  private ${className} page;
}`;
  return {pom, steps};
}














