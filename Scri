






//before head tag
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

//where div = Toolbar 
<input id="pageClassName" type="text"
  placeholder="Page class name (default: GeneratedPage)"
  style="margin:4px;padding:4px;width:220px">

<button id="btnExportZip">Export as ZIP</button>

//show toast

function getPageClassName(){
  const inp=document.querySelector('#pageClassName');
  let v=inp && inp.value.trim();
  if(!v) return 'GeneratedPage';
  v=v.replace(/[^A-Za-z0-9_]/g,'_');
  if(/^\d/.test(v)) v='_'+v;
  return v;
}

//replace btn zip all

async function exportZip(){
  const zip=new JSZip();
  const cls=getPageClassName();

  zip.file("pom.xml", generatePomSeleniumTestNG());
  zip.file("testng.xml", generateTestNGxml());
  zip.file("src/test/java/com/example/runner/CucumberTestNGRunner.java", generateRunnerTestNG());
  zip.file("src/test/java/com/example/hooks/Hooks.java", generateHooksSelenium());
  zip.file(`src/test/java/com/example/pages/${cls}.java`, generatePOMJavaSelenium(cls));
  zip.file(`src/test/java/com/example/steps/${cls}Steps.java`, generateStepsJavaSelenium(cls+"Steps"));
  zip.file("src/test/resources/features/generated.feature", generateFeatureTemplate());

  const blob=await zip.generateAsync({type:"blob"});
  const url=URL.createObjectURL(blob);
  const a=document.createElement("a");
  a.href=url; a.download="project.zip"; a.click();
  setTimeout(()=>URL.revokeObjectURL(url),1000);
  showToast("ZIP Exported");
}

//add event listner
document.querySelector('#btnExportZip').addEventListener('click', exportZip);


<select id="mainMenu" style="margin:6px;padding:6px;width:260px;border-radius:8px;">
  <optgroup label="üîç Locator Panels">
    <option value="basic">Basic</option>
    <option value="wildcards">Wildcards</option>
    <option value="axes">Axes</option>
    <option value="functions">Functions & Relative</option>
    <option value="sf">Salesforce / LWC</option>
    <option value="pega">Pega</option>
  </optgroup>
  <optgroup label="‚öôÔ∏è POM & Steps Presets">
    <option value="sel_java_testng">Selenium + Java + Maven TestNG</option>
    <option value="sel_java_cucumber">Selenium + Java + Maven + Cucumber</option>
    <option value="pw_java_testng">Playwright + Java + Maven TestNG</option>
    <option value="pw_java_cucumber">Playwright + Java + Maven + Cucumber</option>
  </optgroup>
</select>


document.querySelector('#mainMenu').addEventListener('change', function(e){
  const val = e.target.value;

  // üîç Locator panels
  if(val === 'basic') switchPanel('basic');
  if(val === 'wildcards') switchPanel('wildcards');
  if(val === 'axes') switchPanel('axes');
  if(val === 'functions') switchPanel('functions');
  if(val === 'sf') switchPanel('sf');
  if(val === 'pega') switchPanel('pega');

  // ‚öôÔ∏è Preset selections
  if(val === 'sel_java_testng'){
    currentFramework = "selenium";
    currentLanguage  = "java";
    currentRunner    = "testng";
    fillLocatorList();
  }
  if(val === 'sel_java_cucumber'){
    currentFramework = "selenium";
    currentLanguage  = "java";
    currentRunner    = "cucumber";
    fillLocatorList();
  }
  if(val === 'pw_java_testng'){
    currentFramework = "playwright";
    currentLanguage  = "java";
    currentRunner    = "testng";
    fillLocatorList();
  }
  if(val === 'pw_java_cucumber'){
    currentFramework = "playwright";
    currentLanguage  = "java";
    currentRunner    = "cucumber";
    fillLocatorList();
  }
});



<select id="presetMenu" style="margin:6px;padding:6px;width:280px;border-radius:8px;">
  <optgroup label="‚öôÔ∏è POM & Steps Presets">
    <option value="sel_java_testng">Selenium + Java + Maven TestNG</option>
    <option value="sel_java_cucumber">Selenium + Java + Maven + Cucumber</option>
    <option value="sel_js_cucumber">Selenium + JavaScript + Maven + Cucumber</option>
    <option value="sel_ts_cucumber">Selenium + TypeScript + Maven + Cucumber</option>
    <option value="sel_py_pytest">Selenium + Python + PyTest</option>
    <option value="pw_java_testng">Playwright + Java + Maven TestNG</option>
    <option value="pw_java_cucumber">Playwright + Java + Maven + Cucumber</option>
    <option value="pw_js_testng">Playwright + JavaScript + Maven TestNG</option>
    <option value="pw_ts_testng">Playwright + TypeScript + Maven TestNG</option>
    <option value="pw_py_pytest">Playwright + Python + PyTest</option>
  </optgroup>
</select>





// üîç Locator menu logic
document.querySelector('#locatorMenu').addEventListener('change', function(e){
  const val = e.target.value;
  if(val === 'basic') switchPanel('basic');
  if(val === 'wildcards') switchPanel('wildcards');
  if(val === 'axes') switchPanel('axes');
  if(val === 'functions') switchPanel('functions');
  if(val === 'sf') switchPanel('sf');
  if(val === 'pega') switchPanel('pega');
});

// ‚öôÔ∏è Preset menu logic
document.querySelector('#presetMenu').addEventListener('change', function(e){
  const val = e.target.value;

  if(val === 'sel_java_testng'){
    currentFramework = "selenium"; currentLanguage = "java"; currentRunner = "testng"; fillLocatorList();
  }
  if(val === 'sel_java_cucumber'){
    currentFramework = "selenium"; currentLanguage = "java"; currentRunner = "cucumber"; fillLocatorList();
  }
  if(val === 'sel_js_cucumber'){
    currentFramework = "selenium"; currentLanguage = "js"; currentRunner = "cucumber"; fillLocatorList();
  }
  if(val === 'sel_ts_cucumber'){
    currentFramework = "selenium"; currentLanguage = "ts"; currentRunner = "cucumber"; fillLocatorList();
  }
  if(val === 'sel_py_pytest'){
    currentFramework = "selenium"; currentLanguage = "python"; currentRunner = "pytest"; fillLocatorList();
  }
  if(val === 'pw_java_testng'){
    currentFramework = "playwright"; currentLanguage = "java"; currentRunner = "testng"; fillLocatorList();
  }
  if(val === 'pw_java_cucumber'){
    currentFramework = "playwright"; currentLanguage = "java"; currentRunner = "cucumber"; fillLocatorList();
  }
  if(val === 'pw_js_testng'){
    currentFramework = "playwright"; currentLanguage = "js"; currentRunner = "testng"; fillLocatorList();
  }
  if(val === 'pw_ts_testng'){
    currentFramework = "playwright"; currentLanguage = "ts"; currentRunner = "testng"; fillLocatorList();
  }
  if(val === 'pw_py_pytest'){
    currentFramework = "playwright"; currentLanguage = "python"; currentRunner = "pytest"; fillLocatorList();
  }
});




function fillLocatorList(panel='basic'){
  locList.innerHTML = '';
  if(!CURRENT_LOCATORS.length){ return; }

  CURRENT_LOCATORS.forEach(loc=>{
    // prefer smart when user is on 'sf' or 'pega' panels
    let value = (loc.xpaths?.[panel]) || loc.xpaths.basic;
    if(panel === 'sf'   && loc.xpaths.sfsmart)   value = loc.xpaths.sfsmart   || loc.xpaths.sf;
    if(panel === 'pega' && loc.xpaths.pegasmart) value = loc.xpaths.pegasmart || loc.xpaths.pega;

    const row = document.createElement('div');
    row.className = 'loc-row';
    row.innerHTML = `
      <input type="checkbox" class="loc-check" data-id="${loc.id}" style="margin-right:8px">
      <div style="display:flex;align-items:center;gap:8px;min-width:0;flex:1">
        <span class="badge">${(loc.framework||'').trim() || loc.tag}</span>
        <div style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:40ch">${loc.text || '(no text)'}</div>
      </div>
      <div class="small mono" style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:60ch" title="${value}">${value}</div>
    `;
    row.addEventListener('click', async (e)=>{
      if(e.target.classList.contains('loc-check')) return; // don't copy when clicking checkbox
      try{ await navigator.clipboard.writeText(value); }catch(e){}
      showToast('Locator copied');
      tryHighlightInPreviewByXPathOrCss({ xpath: value, css: loc.css });
    });
    locList.appendChild(row);
  });
}





$('#btnGenPOM').addEventListener('click', ()=>{
  if(!CURRENT_LOCATORS.length) return showToast('Render & extract first');

  // Collect only checked locators
  const checkedIds = $$('.loc-check:checked').map(cb => cb.dataset.id);
  const selectedLocs = CURRENT_LOCATORS.filter(l => checkedIds.includes(l.id));

  if(!selectedLocs.length) return showToast('Select at least one element');

  const fw = $('.sw[data-fw].active').dataset.fw;         
  const runner = $('.sw[data-runner].active').dataset.runner; 
  const lang = $('.sw[data-lang].active').dataset.lang;   

  const res = buildArtifacts({fw, runner, lang, locs: selectedLocs});
  POM_CACHE = { pom: res.pom, steps: res.steps };
  output.value = `// ===== POM =====\n${res.pom}\n\n// ===== Steps =====\n${res.steps}`;
  showToast('POM + Steps generated');
});




$('#btnGenPOM').addEventListener('click', ()=>{
  if(!CURRENT_LOCATORS.length) return showToast('Render & extract first');

  // Collect only checked locators
  const checkedIds = $$('.loc-check:checked').map(cb => cb.dataset.id);
  const selectedLocs = CURRENT_LOCATORS.filter(l => checkedIds.includes(l.id));

  if(!selectedLocs.length) return showToast('Select at least one element');

  // Get the current active panel (basic / wildcards / axes / functions / sf / pega)
  const panel = $('.chip.active')?.dataset.paneltab || 'basic';

  // Use the selected XPath for each locator depending on panel
  const locsWithPanel = selectedLocs.map(loc=>{
    let value = loc.xpaths.basic;
    if(panel === 'wildcards') value = loc.xpaths.wildcards;
    if(panel === 'axes')      value = loc.xpaths.axes;
    if(panel === 'functions') value = loc.xpaths.functions;
    if(panel === 'sf')        value = loc.xpaths.sfsmart || loc.xpaths.sf;
    if(panel === 'pega')      value = loc.xpaths.pegasmart || loc.xpaths.pega;
    return {...loc, chosenXpath: value};
  });

  const fw = $('.sw[data-fw].active').dataset.fw;         
  const runner = $('.sw[data-runner].active').dataset.runner; 
  const lang = $('.sw[data-lang].active').dataset.lang;   

  const res = buildArtifacts({fw, runner, lang, locs: locsWithPanel});
  POM_CACHE = { pom: res.pom, steps: res.steps };
  output.value = `// ===== POM =====\n${res.pom}\n\n// ===== Steps =====\n${res.steps}`;
  showToast('POM + Steps generated');
});



function javaSeleniumArtifacts(runner, locs){
  const fields = locs.map((l,i)=>`  @FindBy(xpath = "${l.chosenXpath || l.xpaths.basic}")\n  private WebElement ${camel(l.text)||'elem'+(i+1)};`).join('\n\n');






