<script>
/* =========================
   Full replacement script
   (drop-in for your AdhyanXpath.html)
========================= */

/* =========================
   Helpers & State
========================= */
const $ = s => document.querySelector(s);
const $$ = s => Array.from(document.querySelectorAll(s));
const preview = $('#preview');
const locList = $('#locList');
const output = $('#output');
const pasteBox = $('#pasteBox');
const hiddenFile = $('#hiddenFile');
const toast = $('#toast');
const leftHead = $('#leftHead');

let CURRENT_HTML = '';
let CURRENT_DOC = null;
let CURRENT_LOCATORS = []; // array of locator objects
let SELECTED_IDS = new Set();
let POM_CACHE = { pom:'', steps:'' };
let ACTIVE_PANEL = 'basic'; // which tab's xpath to pick for POM

/* =========================
   UI helpers & mode switching
========================= */
const modePOM = $('#modePOM');
const modeAPI = $('#modeAPI');
modePOM?.addEventListener('click', ()=> setMode('pom'));
modeAPI?.addEventListener('click', ()=> setMode('api'));
function setMode(m){
  if(m==='pom'){
    modePOM.classList.add('active'); modeAPI.classList.remove('active');
    $('#apiPanel').classList.add('hidden');
    document.querySelectorAll('#pomLeftCard, #leftHead').forEach(p=>p?.classList?.remove('hidden'));
  } else {
    modeAPI.classList.add('active'); modePOM.classList.remove('active');
    $('#apiPanel').classList.remove('hidden');
    document.querySelectorAll('#pomLeftCard, #leftHead').forEach(p=>p?.classList?.add('hidden'));
  }
}

/* toast */
function showToast(msg){ toast.textContent = msg; toast.classList.add('show'); setTimeout(()=>toast.classList.remove('show'),1400); }

/* =========================
   File open / paste / clear / drag-drop
========================= */
$('#btnOpenFile')?.addEventListener('click', ()=> hiddenFile.click());
hiddenFile?.addEventListener('change', e=>{
  const f = e.target.files[0]; if(!f) return;
  const reader = new FileReader();
  reader.onload = ev => { pasteBox.value = ev.target.result; renderPreview(); };
  reader.readAsText(f);
});
$('#btnPaste')?.addEventListener('click', async ()=>{
  try{
    const txt = await navigator.clipboard.readText();
    if(!txt) return showToast('Clipboard empty');
    pasteBox.value = txt; renderPreview();
  }catch(e){ showToast('Clipboard permission denied'); }
});
$('#btnClear')?.addEventListener('click', ()=>{
  pasteBox.value = '';
  preview.srcdoc = '<body style="font-family:sans-serif"><h3>Preview cleared</h3></body>';
  CURRENT_HTML = ''; CURRENT_DOC = null; CURRENT_LOCATORS = []; SELECTED_IDS = new Set();
  locList.innerHTML = ''; output.value = '';
});
const dropZone = $('#dropZone');
if(dropZone){
  ['dragenter','dragover'].forEach(ev=>dropZone.addEventListener(ev,e=>{ e.preventDefault(); dropZone.style.borderColor='#5a48f0'; }));
  ['dragleave','drop'].forEach(ev=>dropZone.addEventListener(ev,e=>{ e.preventDefault(); dropZone.style.borderColor='#3a475a'; }));
  dropZone.addEventListener('drop', e=>{
    const f = e.dataTransfer.files?.[0]; if(!f) return;
    const reader = new FileReader();
    reader.onload = ev => { pasteBox.value = ev.target.result; renderPreview(); };
    reader.readAsText(f);
  });
}

/* =========================
   Render Preview -> extraction
   (Action extractor runs automatically)
========================= */
$('#btnRender')?.addEventListener('click', renderPreview);
function renderPreview(){
  const html = (pasteBox.value||'').trim() || '<!doctype html><meta charset="utf-8"><body><h3>Paste HTML and click Render</h3></body>';
  CURRENT_HTML = html;
  // inject light background so content is readable
  const LIGHT_INJECT = `<style>html,body{background:#fff !important;color:#0f172a !important} *{color-scheme:light !important}</style>`;



// --- sanitize HTML to avoid file:// and protocol-relative resolution issues ---
function sanitizeForPreview(html){
  if(!html) return html;

  // 1) convert protocol-relative URLs (//host/path) -> https://host/path
  html = html.replace(/(href|src)=["']\/\/([^"'\s>]+)["']/gi, (m, attr, host) => {
    return `${attr}="https://${host}"`;
  });

  // 2) remove file: references entirely (these will fail when opened locally)
  html = html.replace(/(href|src)=["']file:[^"']*["']/gi, '');

  // 3) optionally remove external script tags with src (avoid CSP/load errors)
  //    keep inline scripts if you want, but external network scripts often fail in srcdoc/data URI
  html = html.replace(/<script\b[^>]*\bsrc=['"][^'"]+['"][^>]*>\s*<\/script>/gi, '');

  // 4) optionally remove <link rel="preload"> or other problematic tags (small guard)
  html = html.replace(/<link\b[^>]*rel=["']preload["'][^>]*>/gi, '');

  // 5) If many links are to same host, optionally add a base tag to make relative links resolve to https host
  //    Detect host of first absolute url and add <base> (safe fallback)
  const m = html.match(/https?:\/\/([^"'\s>]+?)\//i);
  if(m && html.indexOf('<base') === -1){
    const host = m[1];
    const baseTag = `<base href="https://${host}/">`;
    html = html.replace(/<head\b[^>]*>/i, (h) => h + '\n' + baseTag);
  }

  return html;
}




  preview.srcdoc = `<!doctype html><meta charset="utf-8">${LIGHT_INJECT}${html}`;

  // Build parser DOM for extraction tasks (we don't execute scripts)
  const parser = new DOMParser();
  CURRENT_DOC = parser.parseFromString(html, 'text/html');

  // Extract
  setTimeout(()=>{
    extractAllLocators();
    // action candidates (automatically run)
    extractActionCandidates();
  }, 50);

  showToast('Preview rendered');
}

/* =========================
   Tabs: track ACTIVE_PANEL and sync UI
========================= */
leftHead?.addEventListener('click', e=>{
  const chip = e.target.closest('.chip'); if(!chip) return;
  $$('.chip').forEach(c=>c.classList.remove('active'));
  chip.classList.add('active');
  const p = chip.dataset.paneltab || 'basic';
  ACTIVE_PANEL = p;
  fillLocatorList(p);
});
$$('.side .btn[data-panel]').forEach(b=>b.addEventListener('click', ()=>{
  // also ensure the top chip toggles
  $$('.chip').forEach(c=>c.classList.remove('active'));
  const sel = b.dataset.panel;
  const chip = $(`.chip[data-paneltab="${sel}"]`);
  if(chip) chip.classList.add('active');
  ACTIVE_PANEL = sel;
  fillLocatorList(sel);
  showToast(sel+' panel');
}));

/* =========================
   Basic label helper + XPath generators
========================= */
function bestLabelFor(el){
  const txt = (el.getAttribute?.('aria-label') || el.getAttribute?.('title') || el.getAttribute?.('placeholder') || el.textContent || '').trim();
  return txt.replace(/\s+/g,' ').slice(0,80);
}

function genBasicXPath(el){
  const isSVG = (typeof SVGElement!=='undefined') && (el instanceof SVGElement || el.ownerSVGElement!=null);
  const tag = el.tagName.toLowerCase();
  const tagExpr = isSVG ? `*[local-name()='${tag}']` : tag;
  if(el.id) return `//*[@id="${el.id}"]`;
  if(el.getAttribute && el.getAttribute('name')) return `//${tagExpr}[@name="${el.getAttribute('name')}"]`;
  const label = bestLabelFor(el);
  if(label) return `//${tagExpr}[contains(normalize-space(.),"${label.replace(/"/g,'\\"')}")]`;
  const cls = (el.getAttribute?.('class')||'').trim().split(/\s+/).filter(Boolean)[0];
  if(cls) return `//${tagExpr}[contains(@class,"${cls}")]`;
  const parent = el.parentElement || el.parentNode;
  if(!parent || parent.nodeType!==1) return `//${tagExpr}[1]`;
  const same = Array.from(parent.children||[]).filter(x=>x.tagName===el.tagName);
  const idx = same.indexOf(el)+1;
  return `(${genBasicXPath(parent)}/${tagExpr})[${idx}]`;
}

function genWildcardXPath(el){
  const tag=el.tagName.toLowerCase();
  const label = bestLabelFor(el);
  if(label) return `//*[contains(normalize-space(.),"${label.replace(/"/g,'\\"')}")]`;
  const name = el.getAttribute?.('name'); if(name) return `//${tag}[contains(@name,"${name}")]`;
  const id = el.id; if(id) return `//*[contains(@id,"${id}")]`;
  const cls = (el.getAttribute('class')||'').trim().split(/\s+/).find(Boolean); if(cls) return `//*[contains(@class,"${cls}")]`;
  return genBasicXPath(el);
}

function genAxesXPath(el){
  const tag = el.tagName.toLowerCase();
  const label = bestLabelFor(el);
  if(label) return `//${tag}[normalize-space(.)="${label.replace(/"/g,'\\"')}"] | //label[normalize-space(.)="${label.replace(/"/g,'\\"')}"]/following::${tag}[1]`;
  const parent = el.closest?.('[id],[name],[class]') || el.parentElement;
  if(parent && parent!==el){
    const pid = parent.id ? `//*[@id="${parent.id}"]` : genBasicXPath(parent);
    return `${pid}//${tag}[1]`;
  }
  return genBasicXPath(el);
}

function genFunctionXPath(el){
  const tag = el.tagName.toLowerCase();
  const label = bestLabelFor(el);
  if(label) return `//${tag}[contains(normalize-space(.),"${label.replace(/"/g,'\\"')}")]`;
  const ph = el.getAttribute?.('placeholder'); if(ph) return `//${tag}[starts-with(@placeholder,"${ph.split(' ')[0]}")]`;
  const aria = el.getAttribute?.('aria-label'); if(aria) return `//${tag}[normalize-space(@aria-label)="${aria.replace(/"/g,'\\"')}"]`;
  return genBasicXPath(el);
}

/* Small stubs for SF / Pega / CSS / Playwright generators â€” replace with your specialized ones if present */
function genSalesforceXPath(el){ try{ return genFunctionXPath(el); }catch(e){ return ''; } }
function genSalesforceSmartXPath(el){ try{ return genFunctionXPath(el); }catch(e){ return ''; } }
function genPegaXPath(el){ try{ return genFunctionXPath(el); }catch(e){ return ''; } }
function genPegaSmartXPath(el){ try{ return genFunctionXPath(el); }catch(e){ return ''; } }
function genCSS(el){ try{ return (el && el.getAttribute && el.getAttribute('class')) ? `${el.tagName.toLowerCase()}[class*="${el.getAttribute('class').split(' ')[0]}"]` : ''; }catch(e){ return ''; } }
function genPlaywright(el){ return ''; }

/* =========================
   Dynamic patterns for %s (INSERT #1)
========================= */
function dynamicPatternsFor(el){
  const tag  = el.tagName.toLowerCase();
  const text = (el.getAttribute?.('aria-label') || el.getAttribute?.('title') || el.textContent || '').trim();
  const ph   = el.getAttribute?.('placeholder') || '';
  const name = el.getAttribute?.('name') || '';
  const type = el.getAttribute?.('type') || '';
  const role = el.getAttribute?.('role') || '';
  const patterns = [];

  if(text) patterns.push(`//*[contains(normalize-space(.),"${text.replace(/"/g,'\\"')}")]`);

  if(tag==='button' || role==='button') patterns.push(`//button[contains(normalize-space(.),"%s")]`);
  if(tag==='a') patterns.push(`//a[contains(normalize-space(.),"%s")]`);
  if(tag==='input' && (!type || /text|email|search|password|tel|number/.test(type))) patterns.push(`//input[contains(@placeholder,"%s") or contains(@name,"%s")]`);
  if(tag==='input' && /checkbox/.test(type)) patterns.push(`//input[@type="checkbox" and contains(@name,"%s")]`);
  if(tag==='input' && /radio/.test(type)) patterns.push(`//input[@type="radio" and contains(@name,"%s")]`);
  if(tag==='select') patterns.push(`//select[contains(@name,"%s") or contains(@aria-label,"%s")]`);
  if(tag==='img') patterns.push(`//img[contains(@alt,"%s")]`);

  // common fallbacks
  patterns.push(`//*[contains(@id,"%s")]`);
  patterns.push(`//*[@data-test-id="%s" or @data-testid="%s" or @data-id="%s"]`);

  return [...new Set(patterns)];
}

/* =========================
   Extract all locators (INSERT #2)
========================= */
function extractAllLocators(){
  if(!CURRENT_DOC){ locList.innerHTML = ''; return; }
  const doc = CURRENT_DOC;

  // collector fallback
  const basics = Array.from(doc.querySelectorAll(
    'input,button,a,select,textarea,' +
    'span[role="button"],[role="button"],' +
    '[data-ctl],[data-qa-locator],' +
    '[data-aura-class],[data-aura-rendered-by],[data-key],[data-id],' +
    '*[class*="slds-"]'
  ));
  const lwc = Array.from(doc.querySelectorAll([
    'lightning-input','lightning-button','lightning-combobox','lightning-textarea',
    'lightning-record-edit-form','lightning-tab','lightning-input-field','lightning-formatted-text'
  ].join(',')));
  const svg = Array.from(doc.querySelectorAll('svg, svg *'));
  const all = [...new Set([...basics, ...lwc, ...svg])];

  const elements = all.filter(el=>{
    const style = (el.getAttribute?.('style')||'').toLowerCase();
    if(style.includes('display:none') || style.includes('visibility:hidden')) return false;
    return true;
  });

  const sfDetected   = !!doc.querySelector('*[data-aura-rendered-by], *[class*="slds-"]');
  const pegaDetected = !!doc.querySelector('[data-ctl],span[data-ctl]');

  CURRENT_LOCATORS = elements.map((el,idx)=>{
    const tag = el.tagName.toLowerCase();
    const label = bestLabelFor(el);

    const xp_basic     = genBasicXPath(el);
    const xp_wildcards = genWildcardXPath(el);
    const xp_axes      = genAxesXPath(el);
    const xp_funcs     = genFunctionXPath(el);
    const xp_sf        = genSalesforceXPath(el);
    const xp_sfsmart   = genSalesforceSmartXPath(el) || '';
    const xp_pega      = genPegaXPath(el);
    const xp_pegasmart = genPegaSmartXPath(el) || '';
    const cssSel       = genCSS(el);
    const pwSel        = genPlaywright(el);

    return {
      id: `E${idx+1}`,
      tag,
      text: label,
      framework: pegaDetected ? 'Pega+' : (sfDetected ? 'Salesforce+' : ''),
      xpaths: {
        basic: xp_basic,
        wildcards: xp_wildcards,
        axes: xp_axes,
        functions: xp_funcs,
        sf: xp_sf,
        sfsmart: xp_sfsmart,
        pega: xp_pega,
        pegasmart: xp_pegasmart
      },
      playwright: pwSel,
      css: cssSel,
      dynamic: dynamicPatternsFor(el),
      _el_reference: null // reserved; not serializable â€” not used in output
    };
  });

  fillLocatorList(ACTIVE_PANEL || 'basic');
  showToast(`Extracted ${CURRENT_LOCATORS.length} elements`);
}

/* =========================
   Open dynamic picker helper (INSERT #3)
========================= */
function openDynamicPatternPicker(loc, row){
  let items = (loc?.dynamic && loc.dynamic.length) ? loc.dynamic.slice() : [];

  // fallback: param-ize best existing xpath
  if(!items.length){
    const best = loc?.xpaths?.sfsmart||loc?.xpaths?.sf||loc?.xpaths?.pegasmart||loc?.xpaths?.pega||
                 loc?.xpaths?.functions||loc?.xpaths?.wildcards||loc?.xpaths?.axes||loc?.xpaths?.basic||'';
    if(best) items.push(best.replace(/(=\s*["'])([^"']+)(["'])/, `$1%s$3`));
  }
  if(!items.length){ alert('No dynamic patterns for this element'); return; }

  const overlay = document.createElement('div');
  overlay.style.cssText = 'position:fixed;inset:0;background:rgba(0,0,0,.25);z-index:9999;display:flex;align-items:center;justify-content:center;';
  const panel = document.createElement('div');
  panel.style.cssText = 'max-width:92vw;width:760px;max-height:70vh;overflow:auto;background:#0f1420;color:#e9eef5;border:1px solid #2b3748;border-radius:12px;padding:10px;';
  const title = document.createElement('div');
  title.textContent = `Choose a dynamic %s pattern for <${loc.tag}>`;
  title.style.cssText = 'font-weight:800;margin:6px 4px 10px 4px';
  const listEl = document.createElement('div');
  listEl.style.cssText = 'display:flex;flex-direction:column;gap:8px';

  items.forEach(p=>{
    const item = document.createElement('div');
    item.textContent = p; item.title = p;
    item.style.cssText = 'font-family:ui-monospace,Menlo,Consolas,monospace;border:1px solid #2b3748;border-radius:8px;padding:8px 10px;background:#0b1020;cursor:pointer;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;';
    item.addEventListener('click', async ()=>{
      const valEl = row.querySelector('.val') || row;
      if(valEl) valEl.textContent = p;
      try{ await navigator.clipboard.writeText(p); }catch(_){}
      showToast('Dynamic XPath copied');
      if(/^(\(?\/\/|\.\/\/|\/\/|\(\s*\/\/)/.test(p)) tryHighlight(p, null); else tryHighlight(null, p);
      document.body.removeChild(overlay);
    });
    listEl.appendChild(item);
  });

  panel.appendChild(title);
  panel.appendChild(listEl);
  overlay.appendChild(panel);
  overlay.addEventListener('click', (ev)=>{ if(ev.target===overlay) document.body.removeChild(overlay); });
  document.body.appendChild(overlay);
}

/* =========================
   Locator List UI (full replacement)
   - single-click copy+highlight on value
   - hover highlight
   - per-row Custom button opens dynamic picker
   - checkboxes drive POM generation
========================= */
function fillLocatorList(panel='basic'){
  locList.innerHTML = '';
  if(!CURRENT_LOCATORS.length) return;

  // If user activated 'custom' or 'dynamic' panel let's show dynamic options
  if(panel === 'custom' || panel === 'dynamic'){
    CURRENT_LOCATORS.forEach(loc=>{
      const row = document.createElement('div');
      row.className = 'loc-row';
      const first = (loc.dynamic && loc.dynamic[0]) || (loc.xpaths && (loc.xpaths.sfsmart||loc.xpaths.sf||loc.xpaths.functions||loc.xpaths.wildcards||loc.xpaths.axes||loc.xpaths.basic)) || '';
      row.innerHTML = `
        <input type="checkbox" class="sel" data-id="${loc.id}" style="margin-right:6px"${SELECTED_IDS.has(loc.id)?' checked':''}/>
        <div style="display:flex;align-items:center;gap:8px;min-width:0;flex:1">
          <span class="badge">${(loc.framework||'').trim() || loc.tag}</span>
          <div style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:40ch">${loc.text || '(no text)'}</div>
        </div>
        <div class="mono val" style="flex:2;white-space:nowrap;overflow:hidden;text-overflow:ellipsis" title="${(first||'').replace(/"/g,'&quot;')}">${first}</div>
        <div class="act">
          <select class="dynSel" style="background:#0f1420;border:1px solid #2b3748;border-radius:8px;padding:4px 6px;margin-right:6px"></select>
          <button class="btn" data-action="custom" style="width:auto;padding:4px 8px">Custom</button>
        </div>
      `;
      // populate dropdown
      const sel = row.querySelector('.dynSel');
      (loc.dynamic||[]).forEach(p=>{
        const o = document.createElement('option'); o.value = p; o.textContent = p; sel.appendChild(o);
      });
      sel.addEventListener('change', ()=>{
        const chosen = sel.value;
        row.querySelector('.val').textContent = chosen;
        navigator.clipboard.writeText(chosen).then(()=>showToast('Dynamic XPath copied'));
        if(/^(\(?\/\/|\.\/\/|\/\/|\(\s*\/\/)/.test(chosen)) tryHighlight(chosen, null);
      });

      // value click: copy + highlight
      const valEl = row.querySelector('.val');
      valEl.addEventListener('click', (e)=>{
        e.stopPropagation();
        const text = valEl.textContent.trim();
        if(!text) return;
        navigator.clipboard.writeText(text).then(()=>showToast('Copied'));
        if(/^(\(?\/\/|\.\/\/|\/\/|\(\s*\/\/)/.test(text)) tryHighlight(text, null); else tryHighlight(null, text);
      });
      // hover = highlight only
      valEl.addEventListener('mouseenter', ()=>{
        const text = valEl.textContent.trim();
        if(!text) return;
        if(/^(\(?\/\/|\.\/\/|\/\/|\(\s*\/\/)/.test(text)) tryHighlight(text, null); else tryHighlight(null, text);
      });

      // custom button
      const btnCustom = row.querySelector('[data-action="custom"]');
      if(btnCustom) btnCustom.addEventListener('click', (e)=>{ e.stopPropagation(); openDynamicPatternPicker(loc, row); });

      // selection checkbox
      const cb = row.querySelector('.sel');
      cb.addEventListener('change', (ev)=>{ if(ev.target.checked) SELECTED_IDS.add(loc.id); else SELECTED_IDS.delete(loc.id); });

      locList.appendChild(row);
    });
    return;
  }

  // Normal panels: basic / wildcards / axes / functions / sf / pega
  CURRENT_LOCATORS.forEach(loc=>{
    let value = (loc.xpaths?.[panel]) || loc.xpaths.basic;
    if(panel==='sf' && loc.xpaths.sfsmart) value = loc.xpaths.sfsmart || loc.xpaths.sf;
    if(panel==='pega' && loc.xpaths.pegasmart) value = loc.xpaths.pegasmart || loc.xpaths.pega;

    const row = document.createElement('div');
    row.className = 'loc-row';
    row.innerHTML = `
      <input type="checkbox" class="sel" data-id="${loc.id}" style="margin-right:6px"${SELECTED_IDS.has(loc.id)?' checked':''}/>
      <div style="display:flex;align-items:center;gap:8px;min-width:0;flex:1">
        <span class="badge">${(loc.framework||'').trim() || loc.tag}</span>
        <div style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:40ch">${loc.text || '(no text)'}</div>
      </div>
      <div class="mono val" style="flex:2;white-space:nowrap;overflow:hidden;text-overflow:ellipsis" title="${(value||'').replace(/"/g,'&quot;')}">${value || loc.css || loc.playwright || ''}</div>
      <div class="act">
        <button class="btn" data-action="custom" style="width:auto;padding:4px 8px">Custom</button>
      </div>
    `;

    // click value => copy+highlight
    const valEl = row.querySelector('.val');
    valEl.addEventListener('click', (e)=>{
      e.stopPropagation();
      const text = valEl.textContent.trim();
      if(!text) return;
      navigator.clipboard.writeText(text).then(()=>showToast('Copied'));
      if(/^(\(?\/\/|\.\/\/|\/\/|\(\s*\/\/)/.test(text)) tryHighlight(text, null); else tryHighlight(null, text);
    });
    // hover highlight only
    valEl.addEventListener('mouseenter', ()=>{
      const text = valEl.textContent.trim();
      if(!text) return;
      if(/^(\(?\/\/|\.\/\/|\/\/|\(\s*\/\/)/.test(text)) tryHighlight(text, null); else tryHighlight(null, text);
    });

    // custom button wiring
    const btnCustom = row.querySelector('[data-action="custom"]');
    if(btnCustom) btnCustom.addEventListener('click', (e)=>{ e.stopPropagation(); openDynamicPatternPicker(loc, row); });

    // checkbox selection
    const cb = row.querySelector('.sel');
    cb.addEventListener('change', (ev)=>{ if(ev.target.checked) SELECTED_IDS.add(loc.id); else SELECTED_IDS.delete(loc.id); });

    locList.appendChild(row);
  });
}

/* =========================
   Shadow DOM-aware highlight
   (replaces previous tryHighlight)
========================= */
function tryHighlight(xpath, css){
  // prefer operating on preview iframe document
  const frameDoc = preview.contentDocument || preview.contentWindow?.document;
  if(!frameDoc) return;

  // quick attempt in top-level document
  try{
    if(xpath){
      const iter = frameDoc.evaluate(xpath, frameDoc, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
      const node = iter.iterateNext();
      if(node){ highlightElementInIframe(node); return; }
    }
    if(css){
      const el = frameDoc.querySelector(css);
      if(el){ highlightElementInIframe(el); return; }
    }
  }catch(e){ /* ignore and continue to deep search */ }

  // deep search: recursively search shadowRoots for an element matching xpath
  if(xpath){
    const found = findInShadow(frameDoc, xpath);
    if(found){ highlightElementInIframe(found); return; }
  }
  // as last attempt, search shadows for css selector
  if(css){
    const found = findInShadowByCss(frameDoc, css);
    if(found){ highlightElementInIframe(found); return; }
  }
}

function findInShadow(root, xpath){
  if(!root) return null;
  try{
    if(root.evaluate){
      const v = root.evaluate(xpath, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
      const f = v.iterateNext();
      if(f) return f;
    }
  }catch(e){ /* ignore */ }
  const all = root.querySelectorAll ? root.querySelectorAll('*') : [];
  for(const el of all){
    if(el.shadowRoot){
      const res = findInShadow(el.shadowRoot, xpath);
      if(res) return res;
    }
  }
  return null;
}
function findInShadowByCss(root, css){
  if(!root) return null;
  try{
    if(root.querySelector){
      const f = root.querySelector(css);
      if(f) return f;
    }
  }catch(e){}
  const all = root.querySelectorAll ? root.querySelectorAll('*') : [];
  for(const el of all){
    if(el.shadowRoot){
      const res = findInShadowByCss(el.shadowRoot, css);
      if(res) return res;
    }
  }
  return null;
}

function highlightElementInIframe(el){
  if(!el) return;
  try{
    const old = el.style.outline;
    el.scrollIntoView({behavior:'smooth', block:'center', inline:'center'});
    el.style.outline = '3px solid #ffdf5c';
    setTimeout(()=>{ try{ el.style.outline = old; }catch(e){} }, 2200);
  }catch(e){}
}

/* =========================
   Action candidates extractor (auto-run on render)
   and a small dump table in #locator-dump if present
========================= */
function extractActionCandidates(){
  if(!CURRENT_DOC) return;
  const keywords = [/action/i, /\bactions?\b/i, /^x$/i, /^Ã—$/, /\bclose\b/i, /\bmore\b/i, /\bmenu\b/i, /\bdismiss\b/i];
  const els = Array.from(CURRENT_DOC.querySelectorAll('button, a, [role="button"], [role="menuitem"], [data-action], [data-id]'));
  const candidates = [];
  els.forEach(el=>{
    const txt = (el.innerText || '').trim();
    const title = el.getAttribute('title') || '';
    const aria = el.getAttribute('aria-label') || '';
    // peek inside svg or use <use> tag
    let svgLabel = '';
    const svg = el.querySelector('svg, use, path');
    if(svg) svgLabel = svg.getAttribute('aria-label') || svg.getAttribute('title') || svg.getAttribute('data-key') || '';
    const signal = [txt, title, aria, svgLabel].join(' ').trim();
    if(!signal) return;
    if(keywords.some(rx=>rx.test(signal))){
      const basic = genBasicXPath(el);
      const sf = genSalesforceXPath(el);
      const pega = genPegaXPath(el);
      const axes = genAxesXPath(el);
      candidates.push({ signal, basic, sf, pega, axes });
    }
  });
  window.CURRENT_LOCATORS_ACTIONS = candidates;
  dumpLocatorTable(candidates);
}

function dumpLocatorTable(cands){
  const out = document.getElementById('locator-dump');
  if(!out) return;
  out.innerHTML = '';
  if(!cands.length){ out.textContent = 'No action candidates found'; return; }
  const tbl = document.createElement('table');
  tbl.style.cssText = 'width:100%;border-collapse:collapse;font-family:monospace;font-size:13px;color:#eee';
  const head = document.createElement('tr');
  head.innerHTML = '<th style="border:1px solid #555;padding:6px">Signal</th><th style="border:1px solid #555;padding:6px">Basic</th><th style="border:1px solid #555;padding:6px">SF</th><th style="border:1px solid #555;padding:6px">Pega</th><th style="border:1px solid #555;padding:6px">Axes</th>';
  tbl.appendChild(head);
  cands.forEach(c=>{
    const tr = document.createElement('tr');
    const esc = s => (s||'').replace(/"/g,'&quot;');
    tr.innerHTML = `
      <td style="border:1px solid #555;padding:6px">${c.signal}</td>
      <td style="border:1px solid #555;padding:6px;cursor:pointer" onclick="(function(x){navigator.clipboard.writeText(x); try{ parent.tryHighlight(x,null); }catch(e){} })(\`${esc(c.basic)}\`)">${c.basic}</td>
      <td style="border:1px solid #555;padding:6px;cursor:pointer" onclick="(function(x){navigator.clipboard.writeText(x); try{ parent.tryHighlight(x,null); }catch(e){} })(\`${esc(c.sf)}\`)">${c.sf}</td>
      <td style="border:1px solid #555;padding:6px;cursor:pointer" onclick="(function(x){navigator.clipboard.writeText(x); try{ parent.tryHighlight(x,null); }catch(e){} })(\`${esc(c.pega)}\`)">${c.pega}</td>
      <td style="border:1px solid #555;padding:6px;cursor:pointer" onclick="(function(x){navigator.clipboard.writeText(x); try{ parent.tryHighlight(x,null); }catch(e){} })(\`${esc(c.axes)}\`)">${c.axes}</td>
    `;
    tbl.appendChild(tr);
  });
  out.appendChild(tbl);
}

/* =========================
   POM generation helpers
========================= */
function pickLocator(l){
  if(!l || !l.xpaths) return '';
  if(ACTIVE_PANEL === 'custom' || ACTIVE_PANEL === 'dynamic'){
    return (l.dynamic && l.dynamic[0]) || l.xpaths.basic || '';
  }
  // normal panels: basic,wildcards,axes,functions,sf,pega
  return l.xpaths?.[ACTIVE_PANEL] || l.xpaths.basic || '';
}
function chosenLocators(locs){
  return SELECTED_IDS.size ? locs.filter(l=>SELECTED_IDS.has(l.id)) : locs;
}

/* =========================
   Artifact builders (Java Selenium, Java Playwright, JS/TS/Python Playwright)
   These use pickLocator() + chosenLocators()
========================= */

function buildArtifacts({fw, runner, lang, locs}){
  if(lang==='java'){
    if(fw==='selenium') return javaSeleniumArtifacts(runner, locs);
    else return javaPlaywrightArtifacts(runner, locs);
  }
  if(lang==='javascript') return jsPlaywrightArtifacts(locs);
  if(lang==='typescript') return tsPlaywrightArtifacts(locs);
  if(lang==='python') return pyPlaywrightArtifacts(locs);
  return {pom:'// Unsupported language', steps:''};
}

function javaSeleniumArtifacts(runner, locs){
  const list = chosenLocators(locs);
  const pick = l => pickLocator(l).replace(/"/g,'\\"');
  const fields = list.map((l,i)=>`  @FindBy(xpath = "${pick(l)}")\n  private WebElement el${i+1};`).join('\n\n');
  const actions = list.map((l,i)=>`  public void clickEl${i+1}(){ ensureClickable(el${i+1}); el${i+1}.click(); }`).join('\n');
  const waits = `
  private WebDriver driver;
  private WebDriverWait wait;
  public SamplePage(WebDriver driver){
    this.driver = driver;
    PageFactory.initElements(driver, this);
    this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
  }
  private void ensureVisible(WebElement e){ wait.until(ExpectedConditions.visibilityOf(e)); }
  private void ensureClickable(WebElement e){ wait.until(ExpectedConditions.elementToBeClickable(e)); }`;
  const pom = `import org.openqa.selenium.*; 
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.*;
import java.time.Duration;

public class SamplePage {
${fields}

${waits}

${actions}
}
`;
  const steps = (runner==='cucumber') ? `import io.cucumber.java.en.*;\npublic class Steps {\n  private WebDriver driver; private SamplePage page;\n  @Given("open") public void open(){ /* init driver */ page = new SamplePage(driver); }\n  @When("click element") public void click(){ page.clickEl1(); }\n}` :
    `import org.testng.annotations.*;\npublic class TestSample {\n  private WebDriver driver; private SamplePage page;\n  @BeforeClass public void setup(){ /* init driver */ page = new SamplePage(driver); }\n  @Test public void t1(){ page.clickEl1(); }\n  @AfterClass public void cleanup(){ if(driver!=null) driver.quit(); }\n}`;
  return {pom, steps};
}

function javaPlaywrightArtifacts(runner, locs){
  const list = chosenLocators(locs);
  const fields = list.map((l,i)=>`  private Locator el${i+1};`).join('\n');
  const init = list.map((l,i)=>`    el${i+1} = page.locator("xpath=${pickLocator(l).replace(/"/g,'\\"')}");`).join('\n');
  const actions = list.map((l,i)=>`  public void clickEl${i+1}(){ el${i+1}.click(); }`).join('\n');
  const pom = `import com.microsoft.playwright.*;\npublic class PwPage {\n  private Page page;\n${fields}\n  public PwPage(Page page){\n    this.page = page;\n${init}\n  }\n${actions}\n}\n`;
  const steps = `// Playwright Java steps placeholder`;
  return {pom, steps};
}

function jsPlaywrightArtifacts(locs){
  const list = chosenLocators(locs);
  const fields = list.map((l,i)=>`  const el${i+1} = page.locator(\`xpath=${pickLocator(l)}\`);`).join('\n');
  const pom = `// JS Playwright sample\nmodule.exports.test = async ({ page }) => {\n${fields}\n  await el1.click();\n};\n`;
  return {pom, steps:''};
}

function tsPlaywrightArtifacts(locs){
  const list = chosenLocators(locs);
  const fields = list.map((l,i)=>`  const el${i+1} = page.locator(\`xpath=${pickLocator(l)}\`);`).join('\n');
  const pom = `// TS Playwright sample\nexport async function test(page: import('@playwright/test').Page){\n${fields}\n  await el1.click();\n}\n`;
  return {pom, steps:''};
}

function pyPlaywrightArtifacts(locs){
  const list = chosenLocators(locs);
  const fields = list.map((l,i)=>`    el${i+1} = page.locator("xpath=${pickLocator(l)}")`).join('\n');
  const pom = `# Python Playwright sample\ndef test_example(page):\n${fields}\n    el1.click()\n`;
  return {pom, steps:''};
}

/* =========================
   Export (locators + checks)
========================= */
$('#btnExport')?.addEventListener('click', ()=>{
  if(!CURRENT_LOCATORS.length) return showToast('Nothing to export');
  const chosen = chosenLocators(CURRENT_LOCATORS);
  const lines = [];
  lines.push('// Export â€” locators with basic checks');
  chosen.forEach(l=>{
    lines.push(`// ${l.id} â€” <${l.tag}> â€” ${l.text}`);
    if(l.xpaths){
      lines.push(`XPath (selected): ${pickLocator(l)}`);
      lines.push(`XPath (basic): ${l.xpaths.basic}`);
      lines.push(`XPath (wildcards): ${l.xpaths.wildcards}`);
      lines.push(`XPath (axes): ${l.xpaths.axes}`);
      lines.push(`XPath (functions): ${l.xpaths.functions}`);
      lines.push(`XPath (salesforce): ${l.xpaths.sf}`);
      lines.push(`XPath (pega): ${l.xpaths.pega}`);
    }
    lines.push(`CSS: ${l.css}`);
    lines.push(`Playwright: ${l.playwright}`);
    lines.push('Checks:');
    lines.push('  - visible');
    lines.push('  - enabled');
    lines.push('  - clickable');
    lines.push('');
  });
  const blob = new Blob([lines.join('\\n')], {type:'text/plain'});
  downloadBlob(blob, SELECTED_IDS.size? 'locators_selected.txt' : 'locators_export.txt');
  output.value = lines.join('\\n');
  showToast(SELECTED_IDS.size? 'Exported selected' : 'Exported');
});

/* =========================
   Generate POM + Steps
========================= */
$('#btnGenPOM').addEventListener('click', ()=>{
  if(!CURRENT_LOCATORS.length) return showToast('Render & extract first');
  const fw = $('.sw[data-fw].active').dataset.fw || 'selenium';
  const runner = $('.sw[data-runner].active').dataset.runner || 'testng';
  const lang = $('.sw[data-lang].active').dataset.lang || 'java';
  const res = buildArtifacts({fw, runner, lang, locs: CURRENT_LOCATORS});
  POM_CACHE = { pom: res.pom, steps: res.steps };
  output.value = `// ===== POM =====\n${res.pom}\n\n// ===== Steps =====\n${res.steps}`;
  showToast('POM + Steps generated');
});

/* =========================
   Utils
========================= */
function downloadBlob(blob, filename){
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href = url; a.download = filename; document.body.appendChild(a); a.click();
  setTimeout(()=>{ URL.revokeObjectURL(url); a.remove(); }, 0);
}
function slug(s){ return (s||'element').toString().replace(/\s+/g,'_').replace(/[^A-Za-z0-9_]/g,'').replace(/^(\d)/,'_$1').slice(0,60); }
function camel(s){ return s.toString().replace(/[^\p{L}\p{N}]+/gu,' ').trim().toLowerCase().split(' ').map((w,i)=> i? (w.charAt(0).toUpperCase()+w.slice(1)) : w).join(''); }
function safe(s){ return (s||'').replace(/[^A-Za-z0-9_]/g,''); }

/* Init */
setMode('pom');
</script>
